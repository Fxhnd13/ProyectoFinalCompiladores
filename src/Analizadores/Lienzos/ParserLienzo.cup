package Analizadores.Lienzos; 

import Analizadores.Objetos.Atributo;
import Objetos.ColorP;
import Analizadores.Objetos.Token;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

action code {:
    
    private void inicializarColor(ColorP color, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Red":{
                    if(color.getRed()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Red repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setRed(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Blue":{
                    if(color.getBlue()!=(-1)){
                         listErrores.add("Ya existe un valor asignado, atributo Blue repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal, error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setBlue(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Green":{
                    if(color.getGreen()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Green repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setGreen(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Hexadecimal":{
                    if(color.getHex()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Hex repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getRed()!=(-1)||color.getBlue()!=(-1)||color.getGreen()!=(-1)){
                            listErrores.add("Ya existe un valor asignado, atributo RGB error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setHex((String) atributo.getValor());
                        }
                    }
                    break;  
                }
            }
        }
    }

    private void inicializarLienzo(Lienzo lienzoTemp, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Id":{
                    if(lienzoTemp.getIdSalida()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo id repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setIdSalida((String) atributo.getValor());
                    }
                    break;
                }
                case "Tipo":{
                    if(lienzoTemp.getExtension()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo tipo repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setExtension((String) atributo.getValor());
                    }
                    break;
                }
                case "Fondo":{
                    if(lienzoTemp.getFondo()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Fondo repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setFondo((ColorP) atributo.getValor());
                    }
                    break;
                }
                case "Pixeles":{
                    if(lienzoTemp.getCuadros()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo cuadros repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setCuadros(Integer.parseInt(atributo.getValor().toString()));
                    }
                    break;
                }
                case "Dimension_x":{
                    if(lienzoTemp.getdX()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Dimension_x repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setdX(Integer.parseInt(atributo.getValor().toString()));
                    }
                    break;
                }
                case "Dimension_y":{
                    if(lienzoTemp.getdY()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Dimension_y repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setdY(Integer.parseInt(atributo.getValor().toString()));
                    }
                    break;
                }
            }
        }
    }
    
    private boolean isValido(ColorP color){
        boolean valor = true;
        if(color.getHex()==null){
            if(color.getRed()==(-1)||color.getBlue()==(-1)||color.getGreen()==(-1)) valor = false;
        }
        return valor;
    }

    private boolean isValido(Lienzo lienzoT){
        boolean valor = true;
        int lineaLienzoT = lienzoT.getLineaT();
        int columnaLienzoT = lienzoT.getColumnaT();
        if(lienzoT.getIdSalida()==null){
            listErrores.add("No se especifico el nombre de salida que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getExtension()==null){
            listErrores.add("No se especifico el tipo de salida que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getFondo()==null){
            listErrores.add("No se especifico el fondo que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getCuadros()==-1){
            listErrores.add("No se especifico la cantidad de pixeles que tendrá cada cuadro del lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getdX()==-1){
            listErrores.add("No se especifico la cantidad de cuadros horizontales que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getdY()==-1){
            listErrores.add("No se especifico la cantidad de cuadros verticales que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: "+
                            lineaLienzoT+", columna: "+columnaLienzoT);
        }
        return valor;
    }

    private boolean existeLienzo(Lienzo lienzo, List<Lienzo> lienzos){
        boolean valor = false;
        if(lienzos != null){
            for(Lienzo lienzoT : lienzos){
                if(lienzo.getId().equals(lienzoT.getId())) valor = true;
            }
        }
        return valor;
    }
:}

parser code {:
        
        private List<String> listErrores = new ArrayList<String>();

        public List<String> getErrores(){
            return listErrores;
        }
        
        public ParserLienzo(LexerLienzo lex) { 
            super(lex);   
            listErrores = lex.getErrorsList();
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = ((Token)s.value).getLexema();
            int linea = (((Token)s.value).getLinea());
            int columna = (((Token)s.value).getColumna());
            switch(s.toString()){
                //para palabras reservadas
                case "#2": case "#6": case "#7": case "#9": case "#10": case "#11": case "#12": case "#13": case "#14": case "#15": case "#16": case "#17" :{
                    message = "No se esperaba una palabra reservada, probablemente hace falta una coma en la linea anterior o una llave";
                    break;
                }
                case "#3": message = "No se esperaba una llave abierta"; break;
                case "#4": message = "No se esperaba una llave cerrada"; break;
                case "#5": message = "No se esperaba una asignacion, verifique que antes se encuentre un Id o una palabra reservada"; break;
                case "#8": message = "No se esperaba una coma o fin de linea"; break;
                case "#18": message = "No se esperaba una comilla, verifique que el tipo de dato del atributo que desea asignar, sea una cadena"; break;
                case "#19": message = "No se esperaba un Id, verifique que haya finalizado linea anteriormente"; break;
                case "#20": message = "No se esperaba un valor Hex, verifique que el tipo de dato del atributo que desea asignar, sea color"; break;
                case "#21": message = "No se esperaba una extension, verifique que el tipo de dato del atributo que desea asignar, sea una extension"; break;
                case "#22": message = "No se esperaba un entero, verifique que el tipo de dato del atributo que desea asignar, sea un entero"; break;
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }
        
:}

/* Terminals (tokens returned by the scanner). */
terminal Token         PR_LIENZOS, LLAVE_A, LLAVE_C, ASIGNACION, PR_NOMBRE, PR_TIPO, COMA, PR_FONDO, PR_TAMANO, PR_CUADRO, PR_DX, PR_DY, PR_RED;
terminal Token         PR_GREEN, PR_BLUE, PR_HEX, COMILLA;
terminal Token         ID, HEX, EXTENSION;
terminal Token         ENTERO;

non terminal List<Lienzo>               S, strLienzos;
non terminal Lienzo                     inicioLienzo;
non terminal List<Atributo>             strLienzo, paramFondo, paramTamano, paramLienzo;
non terminal Atributo                   paramFondoSolo, paramTamanoSolo;
non terminal List<String>               strSalida;
non terminal String                     paramSalidaSolo;

precedence left         COMA;
/* The grammar */

start with S;

S ::=               LLAVE_A PR_LIENZOS ASIGNACION LLAVE_A strLienzos:listLienzos LLAVE_C LLAVE_C {:
                        if(listLienzos == null) listLienzos = new ArrayList<Lienzo>();
                        RESULT = listLienzos;
                    :}
                    |error LLAVE_A strLienzos LLAVE_C LLAVE_C
                    ;

strLienzos ::=      strLienzos:listLienzos COMA inicioLienzo:lienzo {:
                            if(listLienzos == null) listLienzos = new ArrayList<Lienzo>();
                            if(lienzo != null){
                                if(!existeLienzo(lienzo, listLienzos)){
                                    if(isValido(lienzo)){
                                        listLienzos.add(lienzo);
                                    }
                                }
                            }
                            RESULT = listLienzos;
                        :}
                    |inicioLienzo:lienzo {:
                            ArrayList<Lienzo> listLienzos = new ArrayList<Lienzo>();
                            if(lienzo != null){
                                if(isValido(lienzo)){
                                    listLienzos.add(lienzo);
                                }
                            }
                            RESULT = listLienzos;
                        :}
                    |error COMA inicioLienzo
                    ;

inicioLienzo ::=    ID:id ASIGNACION LLAVE_A strLienzo:listAtributos LLAVE_C {:
                            Lienzo lienzo = new Lienzo();
                            if(listAtributos != null) inicializarLienzo(lienzo, (List<Atributo>) listAtributos);
                            if(id != null){
                                lienzo.setId(id.getLexema());
                                lienzo.setLineaT(id.getLinea());
                                lienzo.setColumnaT(id.getColumna());
                            }
                            RESULT = lienzo;
                        :}
                    |error LLAVE_A strLienzo LLAVE_C
                    ;

strLienzo ::=       strLienzo:listAtributos COMA paramLienzo:listAtributosDerecha {:
                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                            if(listAtributosDerecha != null){
                                for(Atributo atributo : listAtributosDerecha){
                                    listAtributos.add(atributo);
                                }
                            }
                            RESULT = listAtributos;
                        :}
                    |paramLienzo:listAtributosDerecha {:
                            if(listAtributosDerecha == null) listAtributosDerecha = new ArrayList<Atributo>();
                            RESULT = listAtributosDerecha;
                        :}
                    |error COMA paramLienzo
                    |error LLAVE_C strLienzos
                    ;

paramFondo ::=      paramFondo:listAtributos COMA paramFondoSolo:atributo {:
                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                            if(atributo != null) listAtributos.add(atributo);
                            RESULT = listAtributos;
                        :}
                    |paramFondoSolo:atributo {:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(atributo != null) atributos.add(atributo);
                            RESULT = atributos;
                        :}
                    |error COMA paramFondoSolo
                    |error LLAVE_C paramLienzo
                    ;

paramFondoSolo ::=  PR_RED:dcl ASIGNACION ENTERO:valor {:
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Red", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        :}
                    |PR_BLUE:dcl ASIGNACION ENTERO:valor{:
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Blue", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        :}
                    |PR_GREEN:dcl ASIGNACION ENTERO:valor{:
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Green", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        :}
                    |PR_HEX:dcl ASIGNACION HEX:valor{:
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Hexadecimal", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        :}
                    ;
                  
paramTamanoSolo::=  PR_CUADRO:dcl ASIGNACION ENTERO:valor {:
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Pixeles", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        :}
                    |PR_DX:dcl ASIGNACION ENTERO:valor {:
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Dimension_x", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        :}
                    |PR_DY:dcl ASIGNACION ENTERO:valor {:
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Dimension_y", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        :}
                    ;

paramTamano::=      paramTamano:listAtributos COMA paramTamanoSolo:atributo {:
                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                            if(atributo != null) listAtributos.add(atributo);
                            RESULT = listAtributos;
                        :}
                    |paramTamanoSolo:atributo {:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(atributo != null) atributos.add(atributo);
                            RESULT = atributos;
                        :}
                    |error COMA paramTamanoSolo
                    |error LLAVE_C paramLienzo
                    ;
  
paramLienzo ::=     PR_NOMBRE:dcl ASIGNACION COMILLA strSalida:listNombre COMILLA{:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(listNombre != null){
                                String idFinal = "";
                                for(int i = 0; i < listNombre.size(); i++){
                                    idFinal+=listNombre.get(i);
                                    if((i+1) < listNombre.size()) idFinal+=" ";
                                }
                                if(dcl != null) atributos.add(new Atributo("Id", idFinal, dcl.getLinea(), dcl.getColumna()));
                            }
                            RESULT = atributos;
                        :}
                    |PR_TIPO:dcl ASIGNACION COMILLA EXTENSION:extension COMILLA{:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(dcl != null && extension != null) atributos.add(new Atributo("Tipo", extension.getLexema(), dcl.getLinea(), dcl.getColumna()));
                            RESULT = atributos;
                        :}
                    |PR_FONDO:dcl ASIGNACION LLAVE_A paramFondo:listAtributosFondo LLAVE_C{:
                            ColorP color = new ColorP();
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(listAtributosFondo != null){
                                inicializarColor(color, listAtributosFondo);
                                if(isValido(color)){
                                    if(dcl != null) atributos.add(new Atributo("Fondo", color, dcl.getLinea(), dcl.getColumna()));
                                }else{
                                    listErrores.add("Error encontrado en la declaracion del fondo en la linea: "+dcl.getLinea()+", columna: "+dcl.getColumna()+" no posee los atributos necesarios falta("+((color.getHex()==null&&color.getRed()==(-1))?"Red":"")+" "+((color.getHex()==null&&color.getBlue()==(-1))?"Blue":"")+" "+((color.getHex()==null&&color.getGreen()==(-1))?"Green":"")+")");
                                }
                            }
                            RESULT = atributos;
                        :}
                    |PR_TAMANO ASIGNACION LLAVE_A paramTamano:listAtributosTamano LLAVE_C {:
                            if(listAtributosTamano == null) listAtributosTamano = new ArrayList<Atributo>();
                            RESULT = listAtributosTamano;
                        :}
                    ;

strSalida ::=       strSalida:listSalida paramSalidaSolo:parametro {:
                            if(listSalida == null) listSalida = new ArrayList<String>();
                            if(parametro != null) listSalida.add(parametro);
                            RESULT = listSalida;
                        :}
                    |paramSalidaSolo:parametro{:
                            ArrayList<String> listSalida = new ArrayList<String>();
                            if(parametro != null) listSalida.add(parametro);
                            RESULT = listSalida;
                        :}
                    |error COMA paramLienzo
                    ;

paramSalidaSolo ::=  ENTERO:valor {: if(valor != null) RESULT = valor.getLexema(); :}
                    |ID:valor   {: if(valor != null) RESULT = valor.getLexema(); :}
                    ;