
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Lienzos;

import Analizadores.Objetos.Atributo;
import Objetos.ColorP;
import Analizadores.Objetos.Token;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserLienzo extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserLienzo() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserLienzo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserLienzo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\011\000\002\002" +
    "\007\000\002\002\006\000\002\003\005\000\002\003\003" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\006\003\000\002\006\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\007\005\000" +
    "\002\007\003\000\002\007\005\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\010\007\000\002\010" +
    "\006\000\002\010\006\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\013\004\000" +
    "\002\013\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\003\004\005\006\001\002\000\010\003" +
    "\015\005\152\025\012\001\002\000\004\002\150\001\002" +
    "\000\004\004\007\001\002\000\004\007\010\001\002\000" +
    "\004\005\011\001\002\000\006\003\015\025\012\001\002" +
    "\000\004\007\144\001\002\000\006\006\142\012\110\001" +
    "\002\000\006\006\ufffc\012\ufffc\001\002\000\006\005\017" +
    "\012\016\001\002\000\014\003\023\010\022\011\026\013" +
    "\021\014\025\001\002\000\014\003\023\010\022\011\026" +
    "\013\021\014\025\001\002\000\006\006\137\012\115\001" +
    "\002\000\004\007\131\001\002\000\004\007\121\001\002" +
    "\000\030\003\067\005\066\006\062\012\057\015\036\016" +
    "\035\017\041\020\065\021\061\022\056\023\064\001\002" +
    "\000\006\006\ufff7\012\ufff7\001\002\000\004\007\033\001" +
    "\002\000\004\007\027\001\002\000\004\024\030\001\002" +
    "\000\004\027\031\001\002\000\004\024\032\001\002\000" +
    "\006\006\uffe8\012\uffe8\001\002\000\004\005\034\001\002" +
    "\000\012\003\037\015\036\016\035\017\041\001\002\000" +
    "\004\007\054\001\002\000\004\007\052\001\002\000\004" +
    "\012\050\001\002\000\006\006\uffeb\012\uffeb\001\002\000" +
    "\004\007\046\001\002\000\006\006\044\012\043\001\002" +
    "\000\010\015\036\016\035\017\041\001\002\000\006\006" +
    "\uffe6\012\uffe6\001\002\000\006\006\uffec\012\uffec\001\002" +
    "\000\004\030\047\001\002\000\006\006\uffed\012\uffed\001" +
    "\002\000\012\003\037\015\036\016\035\017\041\001\002" +
    "\000\006\006\uffea\012\uffea\001\002\000\004\030\053\001" +
    "\002\000\006\006\uffef\012\uffef\001\002\000\004\030\055" +
    "\001\002\000\006\006\uffee\012\uffee\001\002\000\004\007" +
    "\117\001\002\000\014\003\023\010\022\011\026\013\021" +
    "\014\025\001\002\000\006\006\ufff5\012\ufff5\001\002\000" +
    "\004\007\112\001\002\000\006\003\015\025\012\001\002" +
    "\000\006\006\106\012\043\001\002\000\004\007\104\001" +
    "\002\000\004\007\102\001\002\000\022\003\067\015\036" +
    "\016\035\017\041\020\065\021\061\022\056\023\064\001" +
    "\002\000\004\012\074\001\002\000\006\006\072\012\071" +
    "\001\002\000\012\020\065\021\061\022\056\023\064\001" +
    "\002\000\006\006\uffe3\012\uffe3\001\002\000\006\006\ufff6" +
    "\012\ufff6\001\002\000\022\003\067\015\036\016\035\017" +
    "\041\020\065\021\061\022\056\023\064\001\002\000\006" +
    "\006\ufff4\012\ufff4\001\002\000\006\006\101\012\043\001" +
    "\002\000\006\006\100\012\071\001\002\000\006\006\uffe5" +
    "\012\uffe5\001\002\000\006\006\uffe4\012\uffe4\001\002\000" +
    "\004\030\103\001\002\000\006\006\ufff3\012\ufff3\001\002" +
    "\000\004\026\105\001\002\000\006\006\ufff0\012\ufff0\001" +
    "\002\000\006\006\uffe2\012\uffe2\001\002\000\006\006\uffe1" +
    "\012\110\001\002\000\006\003\015\025\012\001\002\000" +
    "\006\006\ufffd\012\ufffd\001\002\000\004\030\113\001\002" +
    "\000\006\006\ufff1\012\ufff1\001\002\000\006\006\uffe0\012" +
    "\uffe0\001\002\000\014\003\023\010\022\011\026\013\021" +
    "\014\025\001\002\000\006\006\ufff8\012\ufff8\001\002\000" +
    "\004\030\120\001\002\000\006\006\ufff2\012\ufff2\001\002" +
    "\000\004\024\122\001\002\000\006\025\123\030\126\001" +
    "\002\000\010\024\uffdc\025\uffdc\030\uffdc\001\002\000\010" +
    "\024\uffde\025\uffde\030\uffde\001\002\000\010\024\130\025" +
    "\123\030\126\001\002\000\010\024\uffdd\025\uffdd\030\uffdd" +
    "\001\002\000\010\024\uffdf\025\uffdf\030\uffdf\001\002\000" +
    "\006\006\uffe9\012\uffe9\001\002\000\004\005\132\001\002" +
    "\000\014\003\133\020\065\021\061\022\056\023\064\001" +
    "\002\000\004\012\136\001\002\000\006\006\135\012\071" +
    "\001\002\000\006\006\uffe7\012\uffe7\001\002\000\014\003" +
    "\133\020\065\021\061\022\056\023\064\001\002\000\006" +
    "\006\ufff9\012\ufff9\001\002\000\006\006\141\012\115\001" +
    "\002\000\006\006\ufffa\012\ufffa\001\002\000\004\006\143" +
    "\001\002\000\004\002\000\001\002\000\004\005\145\001" +
    "\002\000\014\003\023\010\022\011\026\013\021\014\025" +
    "\001\002\000\006\006\147\012\115\001\002\000\006\006" +
    "\ufffb\012\ufffb\001\002\000\004\002\001\001\002\000\006" +
    "\006\156\012\110\001\002\000\006\003\015\025\012\001" +
    "\002\000\006\006\154\012\110\001\002\000\004\006\155" +
    "\001\002\000\004\002\uffff\001\002\000\004\006\157\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\004\001\001\000\006\003\150\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\012\004\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\137\010\023\001\001\000" +
    "\006\005\017\010\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\067\007\062\011" +
    "\057\012\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\041\012\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\050\012\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\113\010\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\106" +
    "\004\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\076\007\075\011\057\012\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\074\007\050\011\057\012\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\124\014\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\133\011\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\074\011\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\145\010\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\152\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserLienzo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserLienzo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserLienzo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        private List<String> listErrores = new ArrayList<String>();

        public List<String> getErrores(){
            return listErrores;
        }
        
        public ParserLienzo(LexerLienzo lex) { 
            super(lex);   
            listErrores = lex.getErrorsList();
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = ((Token)s.value).getLexema();
            int linea = (((Token)s.value).getLinea());
            int columna = (((Token)s.value).getColumna());
            switch(s.toString()){
                //para palabras reservadas
                case "#2": case "#6": case "#7": case "#9": case "#10": case "#11": case "#12": case "#13": case "#14": case "#15": case "#16": case "#17" :{
                    message = "No se esperaba una palabra reservada, probablemente hace falta una coma en la linea anterior o una llave";
                    break;
                }
                case "#3": message = "No se esperaba una llave abierta"; break;
                case "#4": message = "No se esperaba una llave cerrada"; break;
                case "#5": message = "No se esperaba una asignacion, verifique que antes se encuentre un Id o una palabra reservada"; break;
                case "#8": message = "No se esperaba una coma o fin de linea"; break;
                case "#18": message = "No se esperaba una comilla, verifique que el tipo de dato del atributo que desea asignar, sea una cadena"; break;
                case "#19": message = "No se esperaba un Id, verifique que haya finalizado linea anteriormente"; break;
                case "#20": message = "No se esperaba un valor Hex, verifique que el tipo de dato del atributo que desea asignar, sea color"; break;
                case "#21": message = "No se esperaba una extension, verifique que el tipo de dato del atributo que desea asignar, sea una extension"; break;
                case "#22": message = "No se esperaba un entero, verifique que el tipo de dato del atributo que desea asignar, sea un entero"; break;
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserLienzo$actions {


    
    private void inicializarColor(ColorP color, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Red":{
                    if(color.getRed()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Red repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setRed(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Blue":{
                    if(color.getBlue()!=(-1)){
                         listErrores.add("Ya existe un valor asignado, atributo Blue repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal, error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setBlue(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Green":{
                    if(color.getGreen()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Green repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setGreen(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Hexadecimal":{
                    if(color.getHex()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Hex repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getRed()!=(-1)||color.getBlue()!=(-1)||color.getGreen()!=(-1)){
                            listErrores.add("Ya existe un valor asignado, atributo RGB error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setHex((String) atributo.getValor());
                        }
                    }
                    break;  
                }
            }
        }
    }

    private void inicializarLienzo(Lienzo lienzoTemp, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Id":{
                    if(lienzoTemp.getIdSalida()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo id repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setIdSalida((String) atributo.getValor());
                    }
                    break;
                }
                case "Tipo":{
                    if(lienzoTemp.getExtension()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo tipo repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setExtension((String) atributo.getValor());
                    }
                    break;
                }
                case "Fondo":{
                    if(lienzoTemp.getFondo()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Fondo repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setFondo((ColorP) atributo.getValor());
                    }
                    break;
                }
                case "Pixeles":{
                    if(lienzoTemp.getCuadros()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo cuadros repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setCuadros(Integer.parseInt(atributo.getValor().toString()));
                    }
                    break;
                }
                case "Dimension_x":{
                    if(lienzoTemp.getdX()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Dimension_x repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setdX(Integer.parseInt(atributo.getValor().toString()));
                    }
                    break;
                }
                case "Dimension_y":{
                    if(lienzoTemp.getdY()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Dimension_y repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setdY(Integer.parseInt(atributo.getValor().toString()));
                    }
                    break;
                }
            }
        }
    }
    
    private boolean isValido(ColorP color){
        boolean valor = true;
        if(color.getHex()==null){
            if(color.getRed()==(-1)||color.getBlue()==(-1)||color.getGreen()==(-1)) valor = false;
        }
        return valor;
    }

    private boolean isValido(Lienzo lienzoT){
        boolean valor = true;
        int lineaLienzoT = lienzoT.getLineaT();
        int columnaLienzoT = lienzoT.getColumnaT();
        if(lienzoT.getIdSalida()==null){
            listErrores.add("No se especifico el nombre de salida que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getExtension()==null){
            listErrores.add("No se especifico el tipo de salida que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getFondo()==null){
            listErrores.add("No se especifico el fondo que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getCuadros()==-1){
            listErrores.add("No se especifico la cantidad de pixeles que tendrá cada cuadro del lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getdX()==-1){
            listErrores.add("No se especifico la cantidad de cuadros horizontales que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getdY()==-1){
            listErrores.add("No se especifico la cantidad de cuadros verticales que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: "+
                            lineaLienzoT+", columna: "+columnaLienzoT);
        }
        return valor;
    }

    private boolean existeLienzo(Lienzo lienzo, List<Lienzo> lienzos){
        boolean valor = false;
        if(lienzos != null){
            for(Lienzo lienzoT : lienzos){
                if(lienzo.getId().equals(lienzoT.getId())) valor = true;
            }
        }
        return valor;
    }

  private final ParserLienzo parser;

  /** Constructor */
  CUP$ParserLienzo$actions(ParserLienzo parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserLienzo$do_action_part00000000(
    int                        CUP$ParserLienzo$act_num,
    java_cup.runtime.lr_parser CUP$ParserLienzo$parser,
    java.util.Stack            CUP$ParserLienzo$stack,
    int                        CUP$ParserLienzo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserLienzo$result;

      /* select the action based on the action number */
      switch (CUP$ParserLienzo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Lienzo> start_val = (List<Lienzo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		RESULT = start_val;
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserLienzo$parser.done_parsing();
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LLAVE_A PR_LIENZOS ASIGNACION LLAVE_A strLienzos LLAVE_C LLAVE_C 
            {
              List<Lienzo> RESULT =null;
		int listLienzosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int listLienzosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		List<Lienzo> listLienzos = (List<Lienzo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		
                        if(listLienzos == null) listLienzos = new ArrayList<Lienzo>();
                        RESULT = listLienzos;
                    
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-6)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error LLAVE_A strLienzos LLAVE_C LLAVE_C 
            {
              List<Lienzo> RESULT =null;

              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= error strLienzos LLAVE_C LLAVE_C 
            {
              List<Lienzo> RESULT =null;

              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // strLienzos ::= strLienzos COMA inicioLienzo 
            {
              List<Lienzo> RESULT =null;
		int listLienzosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int listLienzosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		List<Lienzo> listLienzos = (List<Lienzo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int lienzoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int lienzoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Lienzo lienzo = (Lienzo)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(listLienzos == null) listLienzos = new ArrayList<Lienzo>();
                            if(lienzo != null){
                                if(!existeLienzo(lienzo, listLienzos)){
                                    if(isValido(lienzo)){
                                        listLienzos.add(lienzo);
                                    }
                                }
                            }
                            RESULT = listLienzos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("strLienzos",1, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // strLienzos ::= inicioLienzo 
            {
              List<Lienzo> RESULT =null;
		int lienzoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int lienzoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Lienzo lienzo = (Lienzo)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            ArrayList<Lienzo> listLienzos = new ArrayList<Lienzo>();
                            if(lienzo != null){
                                if(isValido(lienzo)){
                                    listLienzos.add(lienzo);
                                }
                            }
                            RESULT = listLienzos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("strLienzos",1, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicioLienzo ::= ID ASIGNACION LLAVE_A strLienzo LLAVE_C 
            {
              Lienzo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).value;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            Lienzo lienzo = new Lienzo();
                            if(listAtributos != null) inicializarLienzo(lienzo, (List<Atributo>) listAtributos);
                            if(id != null){
                                lienzo.setId(id.getLexema());
                                lienzo.setLineaT(id.getLinea());
                                lienzo.setColumnaT(id.getColumna());
                            }
                            RESULT = lienzo;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("inicioLienzo",2, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicioLienzo ::= error COMA strLienzo LLAVE_C 
            {
              Lienzo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            Lienzo lienzo = new Lienzo();
                            if(listAtributos != null) inicializarLienzo(lienzo, (List<Atributo>) listAtributos);
                            if(id != null){
                                lienzo.setId(id.getLexema());
                                lienzo.setLineaT(id.getLinea()+1);
                                lienzo.setColumnaT(id.getColumna());
                            }
                            RESULT = lienzo;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("inicioLienzo",2, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicioLienzo ::= error LLAVE_A strLienzo LLAVE_C 
            {
              Lienzo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            Lienzo lienzo = new Lienzo();
                            if(listAtributos != null) inicializarLienzo(lienzo, (List<Atributo>) listAtributos);
                            if(id != null){
                                lienzo.setId(id.getLexema());
                                lienzo.setLineaT(id.getLinea()+1);
                                lienzo.setColumnaT(id.getColumna());
                            }
                            RESULT = lienzo;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("inicioLienzo",2, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // strLienzo ::= strLienzo COMA paramLienzo 
            {
              List<Atributo> RESULT =null;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int listAtributosDerechaleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int listAtributosDerecharight = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		List<Atributo> listAtributosDerecha = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                            if(listAtributosDerecha != null){
                                for(Atributo atributo : listAtributosDerecha){
                                    listAtributos.add(atributo);
                                }
                            }
                            RESULT = listAtributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("strLienzo",3, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // strLienzo ::= paramLienzo 
            {
              List<Atributo> RESULT =null;
		int listAtributosDerechaleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int listAtributosDerecharight = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		List<Atributo> listAtributosDerecha = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(listAtributosDerecha == null) listAtributosDerecha = new ArrayList<Atributo>();
                            RESULT = listAtributosDerecha;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("strLienzo",3, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramFondo ::= paramFondo COMA paramFondoSolo 
            {
              List<Atributo> RESULT =null;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Atributo atributo = (Atributo)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                            if(atributo != null) listAtributos.add(atributo);
                            RESULT = listAtributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramFondo",4, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramFondo ::= paramFondoSolo 
            {
              List<Atributo> RESULT =null;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Atributo atributo = (Atributo)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(atributo != null) atributos.add(atributo);
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramFondo",4, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramFondo ::= error COMA paramFondo 
            {
              List<Atributo> RESULT =null;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		List<Atributo> atributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(atributos == null) atributos = new ArrayList<Atributo>();
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramFondo",4, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramFondoSolo ::= PR_RED ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Red", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramFondoSolo",7, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramFondoSolo ::= PR_BLUE ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Blue", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramFondoSolo",7, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramFondoSolo ::= PR_GREEN ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Green", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramFondoSolo",7, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramFondoSolo ::= PR_HEX ASIGNACION HEX 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Hexadecimal", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramFondoSolo",7, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramTamanoSolo ::= PR_CUADRO ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Pixeles", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramTamanoSolo",8, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramTamanoSolo ::= PR_DX ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Dimension_x", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramTamanoSolo",8, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramTamanoSolo ::= PR_DY ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(dcl != null && valor != null){
                                Atributo atributo = new Atributo("Dimension_y", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                RESULT = atributo;
                            }
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramTamanoSolo",8, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramTamano ::= paramTamano COMA paramTamanoSolo 
            {
              List<Atributo> RESULT =null;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Atributo atributo = (Atributo)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                            if(atributo != null) listAtributos.add(atributo);
                            RESULT = listAtributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramTamano",5, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramTamano ::= paramTamanoSolo 
            {
              List<Atributo> RESULT =null;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Atributo atributo = (Atributo)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(atributo != null) atributos.add(atributo);
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramTamano",5, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramTamano ::= error COMA paramTamano 
            {
              List<Atributo> RESULT =null;

              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramTamano",5, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramLienzo ::= PR_NOMBRE ASIGNACION COMILLA strSalida COMILLA 
            {
              List<Atributo> RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).value;
		int listNombreleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listNombreright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<String> listNombre = (List<String>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(listNombre != null){
                                String idFinal = "";
                                for(int i = 0; i < listNombre.size(); i++){
                                    idFinal+=listNombre.get(i);
                                    if((i+1) < listNombre.size()) idFinal+=" ";
                                }
                                if(dcl != null) atributos.add(new Atributo("Id", idFinal, dcl.getLinea(), dcl.getColumna()));
                            }
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramLienzo ::= PR_TIPO ASIGNACION COMILLA EXTENSION COMILLA 
            {
              List<Atributo> RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).value;
		int extensionleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int extensionright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		Token extension = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(dcl != null && extension != null) atributos.add(new Atributo("Tipo", extension.getLexema(), dcl.getLinea(), dcl.getColumna()));
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramLienzo ::= PR_FONDO ASIGNACION LLAVE_A paramFondo LLAVE_C 
            {
              List<Atributo> RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)).value;
		int listAtributosFondoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosFondoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributosFondo = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            ColorP color = new ColorP();
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(listAtributosFondo != null){
                                inicializarColor(color, listAtributosFondo);
                                if(isValido(color)){
                                    if(dcl != null) atributos.add(new Atributo("Fondo", color, dcl.getLinea(), dcl.getColumna()));
                                }else{
                                    listErrores.add("Error encontrado en la declaracion del fondo en la linea: "+dcl.getLinea()+", columna: "+dcl.getColumna()+" no posee los atributos necesarios falta("+((color.getHex()==null&&color.getRed()==(-1))?"Red":"")+" "+((color.getHex()==null&&color.getBlue()==(-1))?"Blue":"")+" "+((color.getHex()==null&&color.getGreen()==(-1))?"Green":"")+")");
                                }
                            }
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramLienzo ::= PR_TAMANO ASIGNACION LLAVE_A paramTamano LLAVE_C 
            {
              List<Atributo> RESULT =null;
		int listAtributosTamanoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosTamanoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributosTamano = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            if(listAtributosTamano == null) listAtributosTamano = new ArrayList<Atributo>();
                            RESULT = listAtributosTamano;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paramLienzo ::= error LLAVE_A paramFondo LLAVE_C 
            {
              List<Atributo> RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)).value;
		int listAtributosFondoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosFondoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributosFondo = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            ColorP color = new ColorP();
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(listAtributosFondo != null){
                                inicializarColor(color, listAtributosFondo);
                                if(isValido(color)){
                                    if(dcl != null) atributos.add(new Atributo("Fondo", color, dcl.getLinea(), dcl.getColumna()));
                                }else{
                                    listErrores.add("Error encontrado en la declaracion del fondo en la linea: "+dcl.getLinea()+", columna: "+dcl.getColumna()+" no posee los atributos necesarios falta("+((color.getHex()==null&&color.getRed()==(-1))?"Red":"")+" "+((color.getHex()==null&&color.getBlue()==(-1))?"Blue":"")+" "+((color.getHex()==null&&color.getGreen()==(-1))?"Green":"")+")");
                                }
                            }
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // paramLienzo ::= error LLAVE_A paramTamano LLAVE_C 
            {
              List<Atributo> RESULT =null;
		int listAtributosTamanoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosTamanoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributosTamano = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            if(listAtributosTamano == null) listAtributosTamano = new ArrayList<Atributo>();
                            RESULT = listAtributosTamano;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-3)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramLienzo ::= error paramFondo LLAVE_C 
            {
              List<Atributo> RESULT =null;
		int listAtributosFondoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosFondoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributosFondo = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            ColorP color = new ColorP();
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(listAtributosFondo != null){
                                inicializarColor(color, listAtributosFondo);
                                if(isValido(color)){
                                    atributos.add(new Atributo("Fondo", color, -1, -1));
                                }else{
                                    listErrores.add("Error encontrado en la declaracion del fondo en la linea: "+(-1)+", columna: "+(-1)+" no posee los atributos necesarios falta("+((color.getHex()==null&&color.getRed()==(-1))?"Red":"")+" "+((color.getHex()==null&&color.getBlue()==(-1))?"Blue":"")+" "+((color.getHex()==null&&color.getGreen()==(-1))?"Green":"")+")");
                                }
                            }
                            RESULT = atributos;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramLienzo ::= error paramTamano LLAVE_C 
            {
              List<Atributo> RESULT =null;
		int listAtributosTamanoleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listAtributosTamanoright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<Atributo> listAtributosTamano = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		
                            if(listAtributosTamano == null) listAtributosTamano = new ArrayList<Atributo>();
                            RESULT = listAtributosTamano;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramLienzo ::= error LLAVE_C strLienzos 
            {
              List<Atributo> RESULT =null;

              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramLienzo ::= error COMA strLienzo 
            {
              List<Atributo> RESULT =null;

              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramLienzo",6, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // strSalida ::= strSalida paramSalidaSolo 
            {
              List<String> RESULT =null;
		int listSalidaleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).left;
		int listSalidaright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).right;
		List<String> listSalida = (List<String>)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		String parametro = (String)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            if(listSalida == null) listSalida = new ArrayList<String>();
                            if(parametro != null) listSalida.add(parametro);
                            RESULT = listSalida;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("strSalida",9, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.elementAt(CUP$ParserLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // strSalida ::= paramSalidaSolo 
            {
              List<String> RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		String parametro = (String)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		
                            ArrayList<String> listSalida = new ArrayList<String>();
                            if(parametro != null) listSalida.add(parametro);
                            RESULT = listSalida;
                        
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("strSalida",9, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramSalidaSolo ::= ENTERO 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		 if(valor != null) RESULT = valor.getLexema(); 
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramSalidaSolo",10, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramSalidaSolo ::= ID 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserLienzo$stack.peek()).value;
		 if(valor != null) RESULT = valor.getLexema(); 
              CUP$ParserLienzo$result = parser.getSymbolFactory().newSymbol("paramSalidaSolo",10, ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserLienzo$stack.peek()), RESULT);
            }
          return CUP$ParserLienzo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserLienzo$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserLienzo$do_action(
    int                        CUP$ParserLienzo$act_num,
    java_cup.runtime.lr_parser CUP$ParserLienzo$parser,
    java.util.Stack            CUP$ParserLienzo$stack,
    int                        CUP$ParserLienzo$top)
    throws java.lang.Exception
    {
              return CUP$ParserLienzo$do_action_part00000000(
                               CUP$ParserLienzo$act_num,
                               CUP$ParserLienzo$parser,
                               CUP$ParserLienzo$stack,
                               CUP$ParserLienzo$top);
    }
}

}
