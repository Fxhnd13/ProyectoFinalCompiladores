
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Colores;

import Analizadores.Objetos.Atributo;
import Objetos.ColorP;
import Analizadores.Objetos.Token;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserColores extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserColores() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserColores(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserColores(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\011\000\002\002" +
    "\007\000\002\002\006\000\002\003\005\000\002\003\003" +
    "\000\002\004\007\000\002\004\006\000\002\004\005\000" +
    "\002\005\005\000\002\005\003\000\002\005\005\000\002" +
    "\006\007\000\002\006\006\000\002\006\005\000\002\007" +
    "\005\000\002\007\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\006\003\004\015\006\001\002\000\010\003" +
    "\014\013\012\015\102\001\002\000\004\002\100\001\002" +
    "\000\004\010\007\001\002\000\004\017\010\001\002\000" +
    "\004\015\011\001\002\000\006\003\014\013\012\001\002" +
    "\000\004\017\074\001\002\000\006\014\ufffc\016\ufffc\001" +
    "\002\000\010\003\023\013\022\015\026\001\002\000\006" +
    "\014\016\016\017\001\002\000\006\003\014\013\012\001" +
    "\002\000\004\016\020\001\002\000\004\002\000\001\002" +
    "\000\006\014\ufffd\016\ufffd\001\002\000\004\017\070\001" +
    "\002\000\020\003\037\004\036\005\041\006\042\007\034" +
    "\014\066\015\043\001\002\000\006\014\030\016\065\001" +
    "\002\000\006\014\ufff7\016\ufff7\001\002\000\006\003\023" +
    "\013\022\001\002\000\006\014\030\016\031\001\002\000" +
    "\006\003\032\013\022\001\002\000\006\014\ufffa\016\ufffa" +
    "\001\002\000\016\003\037\004\036\005\041\006\042\007" +
    "\034\015\043\001\002\000\006\014\ufff8\016\ufff8\001\002" +
    "\000\004\017\063\001\002\000\006\014\045\016\062\001" +
    "\002\000\004\017\060\001\002\000\006\014\054\016\055" +
    "\001\002\000\006\014\ufff1\016\ufff1\001\002\000\004\017" +
    "\052\001\002\000\004\017\050\001\002\000\014\003\037" +
    "\004\036\005\041\006\042\007\034\001\002\000\006\014" +
    "\045\016\046\001\002\000\014\003\037\004\036\005\041" +
    "\006\042\007\034\001\002\000\006\014\ufff4\016\ufff4\001" +
    "\002\000\006\014\ufff2\016\ufff2\001\002\000\004\011\051" +
    "\001\002\000\006\014\uffee\016\uffee\001\002\000\004\011" +
    "\053\001\002\000\006\014\uffef\016\uffef\001\002\000\014" +
    "\003\037\004\036\005\041\006\042\007\034\001\002\000" +
    "\006\003\023\013\022\001\002\000\006\014\030\016\uffeb" +
    "\001\002\000\006\014\uffec\016\uffec\001\002\000\004\011" +
    "\061\001\002\000\006\014\ufff0\016\ufff0\001\002\000\006" +
    "\014\ufff3\016\ufff3\001\002\000\004\012\064\001\002\000" +
    "\006\014\uffed\016\uffed\001\002\000\006\014\ufff9\016\ufff9" +
    "\001\002\000\006\003\032\013\022\001\002\000\006\014" +
    "\ufff6\016\ufff6\001\002\000\004\015\071\001\002\000\014" +
    "\003\037\004\036\005\041\006\042\007\034\001\002\000" +
    "\006\014\045\016\073\001\002\000\006\014\ufff5\016\ufff5" +
    "\001\002\000\004\015\075\001\002\000\006\003\023\013" +
    "\022\001\002\000\006\014\030\016\077\001\002\000\006" +
    "\014\ufffb\016\ufffb\001\002\000\004\002\001\001\002\000" +
    "\006\014\016\016\106\001\002\000\006\003\014\013\012" +
    "\001\002\000\006\014\016\016\104\001\002\000\004\016" +
    "\105\001\002\000\004\002\uffff\001\002\000\004\016\107" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\002\004\001\001\000\006\003\100\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\014\004\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\023" +
    "\006\024\001\001\000\002\001\001\000\004\004\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\034\010\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\026\006\024" +
    "\001\001\000\002\001\001\000\004\006\032\001\001\000" +
    "\002\001\001\000\006\007\034\010\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\043\010\037\001\001\000" +
    "\002\001\001\000\004\010\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\056\010\037" +
    "\001\001\000\006\005\055\006\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\071\010\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\075\006\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\102" +
    "\004\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserColores$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserColores$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserColores$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        private List<String> listErrores = new ArrayList<String>();
        private List<Lienzo> listLienzos = new ArrayList<Lienzo>();

        public List<String> getErrores(){
            return listErrores;
        }
        
        public List<Lienzo> getLienzos(){
            return listLienzos;
        }

        public ParserColores(LexerColores lex, List<Lienzo> lienzos) { 
            super(lex);   
            listLienzos = lienzos;
            listErrores = lex.getErrorsList();
	}

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = ((Token)s.value).getLexema();
            int linea = (((Token)s.value).getLinea());
            int columna = (((Token)s.value).getColumna());
            switch(s.toString()){
                case "#2": case "#3": case "#4": case "#5": case "#6":{
                    message = "No se esperaba una palabra reservada, probablemente hace falta un fin de linea anteriormente";
                    break;
                }
                case "#7": message = "No se esperaba un entero, verifique que el tipo de dato del atributo que desea asignar, sea un entero"; break;
                case "#8": message = "No se esperaba un hexadecimal, verifique que el tipo de dato del atributo que desea asignar, sea hexadecimal"; break;
                case "#9": message = "No se esperaba un id, verifique se se haya finalizado correctamente la linea anterior"; break;
                case "#10": message = "No se esperaba una coma, verifique que efectivamente se trate de un fin de linea"; break;
                case "#11": message = "No se esperaba una llave abierta"; break;
                case "#12": message = "No se esperaba una llave cerrada"; break;
                case "#13": message = "No se esperaba una asignacion, verifique que antes se encuentre un id o una palabra reservada"; break;
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserColores$actions {


    
    private void inicializarColor(ColorP color, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Red":{
                    if(color.getRed()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Red repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setRed(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Blue":{
                    if(color.getBlue()!=(-1)){
                         listErrores.add("Ya existe un valor asignado, atributo Blue repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal, error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setBlue(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Green":{
                    if(color.getGreen()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Green repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setGreen(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Hexadecimal":{
                    if(color.getHex()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Hex repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getRed()!=(-1)||color.getBlue()!=(-1)||color.getGreen()!=(-1)){
                            listErrores.add("Ya existe un valor asignado, atributo RGB error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setHex((String) atributo.getValor());
                        }
                    }
                    break;  
                }
            }
        }
    }
    
    private boolean isValido(ColorP color){
        boolean valor = true;
        if(color.getHex()==null){
            if(color.getRed()==(-1)||color.getBlue()==(-1)||color.getGreen()==(-1)) valor = false;
        }
        return valor;
    }

    private Lienzo getLienzoPorId(String id){
        Lienzo lienzo = null;
        for(Lienzo temp : listLienzos){
            if(temp.getId().equals(id)) lienzo = temp;
        }
        return lienzo;
    }


  private final ParserColores parser;

  /** Constructor */
  CUP$ParserColores$actions(ParserColores parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserColores$do_action_part00000000(
    int                        CUP$ParserColores$act_num,
    java_cup.runtime.lr_parser CUP$ParserColores$parser,
    java.util.Stack            CUP$ParserColores$stack,
    int                        CUP$ParserColores$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserColores$result;

      /* select the action based on the action number */
      switch (CUP$ParserColores$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).value;
		RESULT = start_val;
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserColores$parser.done_parsing();
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LLAVE_A PR_COLORES ASIGNACION LLAVE_A listadoLienzos LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-6)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error LLAVE_A listadoLienzos LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= error listadoLienzos LLAVE_C LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-3)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listadoLienzos ::= listadoLienzos COMA strColoresLienzo 
            {
              Object RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("listadoLienzos",1, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listadoLienzos ::= strColoresLienzo 
            {
              Object RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("listadoLienzos",1, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // strColoresLienzo ::= ID ASIGNACION LLAVE_A strColores LLAVE_C 
            {
              Object RESULT =null;
		int idLienzoleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)).left;
		int idLienzoright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)).right;
		Token idLienzo = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)).value;
		int listColoresleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).left;
		int listColoresright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).right;
		List<ColorP> listColores = (List<ColorP>)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).value;
		
                                    if(idLienzo != null){   
                                        if(listColores != null){
                                            getLienzoPorId(idLienzo.getLexema()).addColores(listColores, listErrores);
                                        }
                                    }
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("strColoresLienzo",2, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // strColoresLienzo ::= error LLAVE_A strColores LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("strColoresLienzo",2, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-3)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // strColoresLienzo ::= error strColores LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("strColoresLienzo",2, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // strColores ::= strColores COMA inicioColor 
            {
              List<ColorP> RESULT =null;
		int listColoresleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).left;
		int listColoresright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).right;
		List<ColorP> listColores = (List<ColorP>)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		ColorP color = (ColorP)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    if(listColores == null) listColores = new ArrayList<ColorP>();
                                    if(color != null) listColores.add(color);
                                    RESULT = listColores;
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("strColores",3, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // strColores ::= inicioColor 
            {
              List<ColorP> RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		ColorP color = (ColorP)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    ArrayList<ColorP> colores = new ArrayList<ColorP>();
                                    if(color != null) colores.add(color);
                                    RESULT = colores;
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("strColores",3, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // strColores ::= error COMA inicioColor 
            {
              List<ColorP> RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("strColores",3, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inicioColor ::= ID ASIGNACION LLAVE_A paramsColor LLAVE_C 
            {
              ColorP RESULT =null;
		int idColorleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)).left;
		int idColorright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)).right;
		Token idColor = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)).value;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-1)).value;
		
                                    ColorP color = new ColorP();
                                    if(idColor != null){
                                        color.setId(idColor.getLexema());
                                        color.setLinea(idColor.getLinea());
                                        color.setColumna(idColor.getColumna());
                                        if(listAtributos != null) inicializarColor(color, listAtributos);
                                        if(isValido(color)){
                                            RESULT = color;
                                        }else{
                                            listErrores.add("Error encontrado en la declaracion del color: "+idColor.getLexema()+" en la linea: "+idColor.getLinea()+", columna: "+idColor.getColumna()+" no posee los atributos necesarios falta("+((color.getHex()==null&&color.getRed()==(-1))?"Red":"")+" "+((color.getHex()==null&&color.getBlue()==(-1))?"Blue":"")+" "+((color.getHex()==null&&color.getGreen()==(-1))?"Green":"")+")");
                                        }
                                    }
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("inicioColor",4, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-4)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicioColor ::= error LLAVE_A paramsColor LLAVE_C 
            {
              ColorP RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("inicioColor",4, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-3)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicioColor ::= error paramsColor LLAVE_C 
            {
              ColorP RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("inicioColor",4, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramsColor ::= paramsColor COMA paramColor 
            {
              List<Atributo> RESULT =null;
		int listAtributosleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).left;
		int listAtributosright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).right;
		List<Atributo> listAtributos = (List<Atributo>)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).value;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		Atributo atributo = (Atributo)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                                    if(atributo != null) listAtributos.add(atributo);
                                    RESULT = listAtributos;
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramsColor",5, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramsColor ::= paramColor 
            {
              List<Atributo> RESULT =null;
		int atributoleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int atributoright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		Atributo atributo = (Atributo)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    ArrayList<Atributo> listAtributos = new ArrayList<Atributo>();
                                    if(atributo != null) listAtributos.add(atributo);
                                    RESULT = listAtributos;
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramsColor",5, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramColor ::= PR_RED ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Red", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramColor",6, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramColor ::= PR_BLUE ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Blue", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramColor",6, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramColor ::= PR_GREEN ASIGNACION ENTERO 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Green", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramColor",6, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramColor ::= PR_HEX ASIGNACION HEX 
            {
              Atributo RESULT =null;
		int dclleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).right;
		Token dcl = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserColores$stack.peek()).value;
		
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Hexadecimal", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                
              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramColor",6, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramColor ::= error COMA paramsColor 
            {
              Atributo RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramColor",6, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramColor ::= error LLAVE_C strColores 
            {
              Atributo RESULT =null;

              CUP$ParserColores$result = parser.getSymbolFactory().newSymbol("paramColor",6, ((java_cup.runtime.Symbol)CUP$ParserColores$stack.elementAt(CUP$ParserColores$top-2)), ((java_cup.runtime.Symbol)CUP$ParserColores$stack.peek()), RESULT);
            }
          return CUP$ParserColores$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserColores$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserColores$do_action(
    int                        CUP$ParserColores$act_num,
    java_cup.runtime.lr_parser CUP$ParserColores$parser,
    java.util.Stack            CUP$ParserColores$stack,
    int                        CUP$ParserColores$top)
    throws java.lang.Exception
    {
              return CUP$ParserColores$do_action_part00000000(
                               CUP$ParserColores$act_num,
                               CUP$ParserColores$parser,
                               CUP$ParserColores$stack,
                               CUP$ParserColores$top);
    }
}

}
