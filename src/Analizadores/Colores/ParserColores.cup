package Analizadores.Colores;

import Analizadores.Objetos.Atributo;
import Objetos.ColorP;
import Analizadores.Objetos.Token;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

action code {:
    
    private void inicializarColor(ColorP color, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Red":{
                    if(color.getRed()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Red repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setRed(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Blue":{
                    if(color.getBlue()!=(-1)){
                         listErrores.add("Ya existe un valor asignado, atributo Blue repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal, error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setBlue(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Green":{
                    if(color.getGreen()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Green repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setGreen(Integer.parseInt(atributo.getValor().toString()));
                        }
                    }
                    break;
                }
                case "Hexadecimal":{
                    if(color.getHex()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Hex repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getRed()!=(-1)||color.getBlue()!=(-1)||color.getGreen()!=(-1)){
                            listErrores.add("Ya existe un valor asignado, atributo RGB error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setHex((String) atributo.getValor());
                        }
                    }
                    break;  
                }
            }
        }
    }
    
    private boolean isValido(ColorP color){
        boolean valor = true;
        if(color.getHex()==null){
            if(color.getRed()==(-1)||color.getBlue()==(-1)||color.getGreen()==(-1)) valor = false;
        }
        return valor;
    }

    private Lienzo getLienzoPorId(String id){
        Lienzo lienzo = null;
        for(Lienzo temp : listLienzos){
            if(temp.getId().equals(id)) lienzo = temp;
        }
        return lienzo;
    }

:}

parser code {:
        
        private List<String> listErrores = new ArrayList<String>();
        private List<Lienzo> listLienzos = new ArrayList<Lienzo>();

        public List<String> getErrores(){
            return listErrores;
        }
        
        public List<Lienzo> getLienzos(){
            return listLienzos;
        }

        public ParserColores(LexerColores lex, List<Lienzo> lienzos) { 
            super(lex);   
            listLienzos = lienzos;
            listErrores = lex.getErrorsList();
	}

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = ((Token)s.value).getLexema();
            int linea = (((Token)s.value).getLinea());
            int columna = (((Token)s.value).getColumna());
            switch(s.toString()){
                case "#2": case "#3": case "#4": case "#5": case "#6":{
                    message = "No se esperaba una palabra reservada, probablemente hace falta un fin de linea anteriormente";
                    break;
                }
                case "#7": message = "No se esperaba un entero, verifique que el tipo de dato del atributo que desea asignar, sea un entero"; break;
                case "#8": message = "No se esperaba un hexadecimal, verifique que el tipo de dato del atributo que desea asignar, sea hexadecimal"; break;
                case "#9": message = "No se esperaba un id, verifique se se haya finalizado correctamente la linea anterior"; break;
                case "#10": message = "No se esperaba una coma, verifique que efectivamente se trate de un fin de linea"; break;
                case "#11": message = "No se esperaba una llave abierta"; break;
                case "#12": message = "No se esperaba una llave cerrada"; break;
                case "#13": message = "No se esperaba una asignacion, verifique que antes se encuentre un id o una palabra reservada"; break;
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }
        
:}

/* Terminals (tokens returned by the scanner). */
terminal Token              PR_RED, PR_BLUE, PR_GREEN, PR_HEX, PR_COLORES, ENTERO, HEX, ID, COMA, LLAVE_A, LLAVE_C, ASIGNACION;

non terminal                S, listadoLienzos, strColoresLienzo;
non terminal List<ColorP>   strColores;
non terminal ColorP         inicioColor;
non terminal List<Atributo> paramsColor;
non terminal Atributo       paramColor;

precedence left COMA;

/* The grammar */

start with S;

S ::=                       LLAVE_A PR_COLORES ASIGNACION LLAVE_A listadoLienzos LLAVE_C LLAVE_C 
                            |error LLAVE_A listadoLienzos LLAVE_C LLAVE_C
                            |error listadoLienzos LLAVE_C LLAVE_C
                            ;

listadoLienzos ::=          listadoLienzos COMA strColoresLienzo
                            |strColoresLienzo
                            ;

strColoresLienzo ::=        ID:idLienzo ASIGNACION LLAVE_A strColores:listColores LLAVE_C {:
                                    if(idLienzo != null){   
                                        if(listColores != null){
                                            getLienzoPorId(idLienzo.getLexema()).setColores(listColores);
                                        }
                                    }
                                :}
                            |error LLAVE_A strColores LLAVE_C
                            |error strColores LLAVE_C
                            ;

strColores ::=              strColores:listColores COMA inicioColor:color {:
                                    if(listColores == null) listColores = new ArrayList<ColorP>();
                                    if(color != null) listColores.add(color);
                                    RESULT = listColores;
                                :}
                            |inicioColor:color {:
                                    ArrayList<ColorP> colores = new ArrayList<ColorP>();
                                    if(color != null) colores.add(color);
                                    RESULT = colores;
                                :}
                            |error COMA inicioColor
                            ;

inicioColor ::=             ID:idColor ASIGNACION LLAVE_A paramsColor:listAtributos LLAVE_C {:
                                    ColorP color = new ColorP();
                                    if(idColor != null){
                                        color.setId(idColor.getLexema());
                                        if(listAtributos != null) inicializarColor(color, listAtributos);
                                        if(isValido(color)){
                                            RESULT = color;
                                        }else{
                                            listErrores.add("Error encontrado en la declaracion del color: "+idColor.getLexema()+" en la linea: "+idColor.getLinea()+", columna: "+idColor.getColumna()+" no posee los atributos necesarios falta("+((color.getHex()==null&&color.getRed()==(-1))?"Red":"")+" "+((color.getHex()==null&&color.getBlue()==(-1))?"Blue":"")+" "+((color.getHex()==null&&color.getGreen()==(-1))?"Green":"")+")");
                                        }
                                    }
                                :}
                            |error LLAVE_A paramsColor LLAVE_C
                            |error paramsColor LLAVE_C
                            ;

paramsColor ::=             paramsColor:listAtributos COMA paramColor:atributo {:
                                    if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                                    if(atributo != null) listAtributos.add(atributo);
                                    RESULT = listAtributos;
                                :}
                            |paramColor:atributo {:
                                    ArrayList<Atributo> listAtributos = new ArrayList<Atributo>();
                                    if(atributo != null) listAtributos.add(atributo);
                                    RESULT = listAtributos;
                                :}
                            ;

paramColor ::=              PR_RED:dcl ASIGNACION ENTERO:valor {:
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Red", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                :}
                            |PR_BLUE:dcl ASIGNACION ENTERO:valor{:
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Blue", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                :}
                            |PR_GREEN:dcl ASIGNACION ENTERO:valor{:
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Green", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                :}
                            |PR_HEX:dcl ASIGNACION HEX:valor{:
                                    if(dcl != null && valor != null){
                                        Atributo atributo = new Atributo("Hexadecimal", valor.getLexema(), dcl.getLinea(), dcl.getColumna());
                                        RESULT = atributo;
                                    }
                                :}
                            |error COMA paramsColor
                            |error LLAVE_C strColores
                            ;
