package Analizadores.Tiempos;

import Analizadores.Objetos.Atributo;
import Analizadores.Objetos.Token;
import Objetos.Tiempo;
import Objetos.Imagen;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

action code {:

    private boolean isValido(Imagen imagen){
        boolean valor = true;
        if(imagen.getId()==null) {
            listErrores.add("Hay un error con la imagen declarada en la linea: "+imagen.getLineaT()+", columna: "+imagen.getColumnaT()+" no posee un id");
            valor = false;
        }
        if(imagen.getDuracion()==(-1)){
            listErrores.add("Hay un error con la imagen declarada en la linea: "+imagen.getLineaT()+", columna: "+imagen.getColumnaT()+" no posee una duracion");
            valor = false;
        }
        return valor;
    }

    private boolean isValido(Tiempo tiempo){
        boolean valor = true;
        if(tiempo.getIdInicio()!= null && tiempo.getIdFin()!=null){
            if(tiempo.existe(tiempo.getIdInicio()) && tiempo.existe(tiempo.getIdFin())){
                if(tiempo.getIndice(tiempo.getIdInicio()) >= tiempo.getIndice(tiempo.getIdFin())){
                    listErrores.add("El idInicio se encuentra despu√©s que el idFin, en el tiempo del lienzo declarado en la linea : "+tiempo.getLineaT()+", columna: "+tiempo.getColumnaT());
                    valor = false;
                }
            }else{
                if(!tiempo.existe(tiempo.getIdInicio())){
                    listErrores.add("No existe el idInicio, en la lista de imagenes, en el tiempo del lienzo declarado en la linea: "+tiempo.getLineaT()+", columna: "+tiempo.getColumnaT());
                    valor = false;
                }
                if(!tiempo.existe(tiempo.getIdFin())) {
                    listErrores.add("No existe el idFin, en la lista de imagenes, en el tiempo del lienzo declarado en la linea : "+tiempo.getLineaT()+", columna: "+tiempo.getColumnaT());
                    valor= false;
                }
            }
        }else{
            if(tiempo.getIdInicio() == null){
                listErrores.add("Hay un error con el tiempo del lienzo declarado en la linea: "+tiempo.getLineaT()+", columna: "+tiempo.getColumnaT()+" no posee un idInicio");
                valor = false;
            }else{
                if(!tiempo.existe(tiempo.getIdInicio())){
                    listErrores.add("No existe el idInicio, en la lista de imagenes, en el tiempo del lienzo declarado en la linea: "+tiempo.getLineaT()+", columna: "+tiempo.getColumnaT());
                    valor = false;
                }
            }
            if(tiempo.getIdFin() == null){
                valor = false;
                listErrores.add("Hay un error con el tiempo del lienzo declarado en la linea: "+tiempo.getLineaT()+", columna: "+tiempo.getColumnaT()+" no posee un idFIn");
            }else{
                if(!tiempo.existe(tiempo.getIdFin())) {
                    listErrores.add("No existe el idFin, en la lista de imagenes, en el tiempo del lienzo declarado en la linea : "+tiempo.getLineaT()+", columna: "+tiempo.getColumnaT());
                    valor = false;
                }
            }
        }
        return valor;
    }

    private void inicializarTiempo(Tiempo tiempo, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "inicio":{
                    if(tiempo.getIdInicio() != null){
                        listErrores.add("Ya existe un valor asignado, atributo inicio repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        tiempo.setIdInicio((String)atributo.getValor());
                    }
                    break;
                }
                case "fin":{
                    if(tiempo.getIdFin() != null){
                        listErrores.add("Ya existe un valor asignado, atributo fin repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        tiempo.setIdFin((String)atributo.getValor());
                    }
                    break;
                }
                case "imagenes":{
                    if(!tiempo.getImagenes().isEmpty()){
                        listErrores.add("Ya existe un valor asignado, atributo imagenes repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        tiempo.setImagenes((List<Imagen>)atributo.getValor());
                    }
                    break;
                }
            }
        }
    }

    private void inicializarImagen(Imagen imagen, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "id":{
                    if(imagen.getId() != null){
                        listErrores.add("Ya existe un valor asignado, atributo id repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        imagen.setId((String) atributo.getValor());
                    }
                    break;
                }
                case "duracion":{
                    if(imagen.getDuracion() != (-1)){
                        listErrores.add("Ya existe un valor asignado, atributo duracion repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        imagen.setDuracion(Integer.parseInt((String)atributo.getValor()));
                    }
                    break;
                }
            }
        }
    }

    private Lienzo getLienzoPorId(String id){
        Lienzo lienzo = null;
        for(Lienzo temp : listLienzos){
            if(temp.getId().equals(id)) lienzo = temp;
        }
        return lienzo;
    }

:}

parser code {:
        
        private List<String> listErrores = new ArrayList<String>();
        private List<Lienzo> listLienzos = new ArrayList<Lienzo>();

        public List<String> getErrores(){
            return listErrores;
        }
        
        public List<Lienzo> getLienzos(){
            return listLienzos;
        }

        public ParserTiempos(LexerTiempos lex, List<Lienzo> lienzos) { 
            super(lex);   
            listLienzos = lienzos;
            listErrores = lex.getErrorsList();
	}

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+((Token)cur_token.value).getLexema());
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = ((Token)s.value).getLexema();
            int linea = (((Token)s.value).getLinea());
            int columna = (((Token)s.value).getColumna());
            switch(s.toString()){
                case "#2": case "#3": case "#4": case "#5": case "#6": case "#7": {
                    message = "No se esperaba una palabra reservada, probablemente hace falta un fin de linea anteriormente";
                    break;
                }
                case "#8": message = "No se esperaba un entero, verifique que el tipo de dato del atributo que desea asignar, sea un entero"; break;
                case "#9": message = "No se esperaba un id, verifique se se haya finalizado correctamente la linea anterior"; break;
                case "#10": message = "No se esperaba una coma, verifique que efectivamente se trate de un fin de linea"; break;
                case "#11": message = "No se esperaba una llave abierta"; break;
                case "#12": message = "No se esperaba una llave cerrada"; break;
                case "#13": message = "No se esperaba un corchete abierto"; break;
                case "#14": message = "No se esperaba un corchete cerrado"; break;
                case "#15": message = "No se esperaba una asignacion, verifique que antes se encuentre un id o una palabra reservada"; break;
                case "#16": message = "No se esperaba una comilla, verifique que el tipo de dato del atributo que desea asignar, sea una cadena"; break;
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }
        
:}

/* Terminals (tokens returned by the scanner). */
terminal Token              PR_INICIO, PR_FIN, PR_IMAGENES, PR_ID, PR_DURACION, PR_TIEMPOS, ENTERO, ID, COMA, LLAVE_A, LLAVE_C, CORCHETE_A, CORCHETE_C, ASIGNACION, COMILLA;

non terminal                    S, strTiempos, inicioTiemposLienzo;
non terminal List<Atributo>     strTiempo, paramsImagen;
non terminal Atributo           paramTiempo, paramImagen;
non terminal Imagen             strImagen;
non terminal List<Imagen>       listImagenes;

precedence left                 COMA;
/* The grammar */

start with S;

S::=                                LLAVE_A PR_TIEMPOS ASIGNACION LLAVE_A strTiempos LLAVE_C LLAVE_C
                                    |error LLAVE_A strTiempos LLAVE_C LLAVE_C
                                    |error strTiempos LLAVE_C LLAVE_C
                                    ;

strTiempos::=                       strTiempos COMA inicioTiemposLienzo
                                    |inicioTiemposLienzo
                                    ;

inicioTiemposLienzo::=              ID:lienzo ASIGNACION LLAVE_A strTiempo:listAtributos LLAVE_C {:
                                            Tiempo tiempo = new Tiempo();
                                            if(listAtributos != null){
                                                inicializarTiempo(tiempo, listAtributos);
                                                tiempo.setLineaT(lienzo.getLinea());
                                                tiempo.setColumnaT(lienzo.getColumna());
                                                if(lienzo != null){
                                                    if(getLienzoPorId(lienzo.getLexema()) != null){
                                                        if(isValido(tiempo)) getLienzoPorId(lienzo.getLexema()).setTiempos(tiempo);
                                                    }else{
                                                        listErrores.add("No existe el lienzo escrito, en la linea: "+lienzo.getLinea()+", columna: "+lienzo.getColumna());
                                                    }
                                                }
                                            }
                                        :}
                                    |error LLAVE_A strTiempo LLAVE_C
                                    |error strTiempo LLAVE_C
                                    ;

strTiempo::=                        strTiempo:listAtributos COMA paramTiempo:atributo {:
                                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                                            if(atributo != null) listAtributos.add(atributo);
                                            RESULT = listAtributos;
                                        :}
                                    |paramTiempo:atributo {:
                                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                                            if(atributo != null) atributos.add(atributo);
                                            RESULT = atributos;
                                        :}
                                    ;

paramTiempo::=                      PR_INICIO:dcl ASIGNACION COMILLA ID:id COMILLA {:
                                            if(id != null){
                                                if(dcl != null){
                                                    Atributo atributo = new Atributo("inicio", id.getLexema(), dcl.getLinea(), dcl.getColumna());
                                                    RESULT = atributo;
                                                }
                                            }    
                                        :}
                                    |PR_FIN:dcl ASIGNACION COMILLA ID:id COMILLA {:
                                            if(id != null){
                                                if(dcl != null){
                                                    Atributo atributo = new Atributo("fin", id.getLexema(), dcl.getLinea(), dcl.getColumna());
                                                    RESULT = atributo;
                                                }
                                            }    
                                        :}
                                    |PR_IMAGENES:dcl ASIGNACION CORCHETE_A listImagenes:imagenes CORCHETE_C {:
                                            if(imagenes != null){
                                                if(dcl != null){
                                                    Atributo atributo = new Atributo("imagenes", imagenes, dcl.getLinea(), dcl.getColumna());
                                                    RESULT = atributo;
                                                }
                                            }    
                                        :}
                                    |error COMA strTiempo
                                    |error CORCHETE_A listImagenes CORCHETE_C
                                    |error listImagenes CORCHETE_C
                                    ;

listImagenes::=                     listImagenes:imagenes COMA strImagen:imagen {:
                                            if(imagenes == null) imagenes = new ArrayList<Imagen>();
                                            if(imagen != null){
                                                if(isValido(imagen)) imagenes.add(imagen);
                                            }
                                            RESULT = imagenes;
                                        :}    
                                    |strImagen:imagen {:
                                            ArrayList<Imagen> imagenes = new ArrayList<Imagen>();
                                            if(imagen != null){
                                                if(isValido(imagen)) imagenes.add(imagen);
                                            }
                                            RESULT = imagenes;
                                        :}
                                    ;

strImagen::=                        LLAVE_A:dcl paramsImagen:listAtributos LLAVE_C {:
                                            if(listAtributos != null){
                                                Imagen imagen = new Imagen();
                                                if(dcl!=null) imagen.setLineaT(dcl.getLinea());
                                                if(dcl!=null) imagen.setColumnaT(dcl.getColumna());
                                                inicializarImagen(imagen, listAtributos);
                                                RESULT = imagen;
                                            }
                                        :}
                                    |error paramsImagen LLAVE_C
                                    ;

paramsImagen::=                     paramsImagen:listAtributos COMA paramImagen:atributo {:
                                            if(listAtributos == null) listAtributos = new ArrayList<Atributo>();
                                            if(atributo != null) listAtributos.add(atributo);
                                            RESULT = listAtributos;
                                        :}
                                    |paramImagen:atributo {:
                                            ArrayList<Atributo> listAtributos = new ArrayList<Atributo>();
                                            if(atributo != null) listAtributos.add(atributo);
                                            RESULT = listAtributos;
                                        :}
                                    ;

paramImagen::=                      PR_ID:dcl ASIGNACION COMILLA ID:id COMILLA {:
                                            if(id != null){
                                                if(dcl != null){
                                                    Atributo atributo = new Atributo("id", id.getLexema(), dcl.getLinea(), dcl.getColumna());
                                                    RESULT = atributo;
                                                }
                                            }
                                        :}
                                    |PR_DURACION:dcl ASIGNACION ENTERO:id {:
                                            if(id != null){
                                                if(dcl != null){
                                                    Atributo atributo = new Atributo("duracion", id.getLexema(), dcl.getLinea(), dcl.getColumna());
                                                    RESULT = atributo;
                                                }
                                            }
                                        :}
                                    |error COMA paramsImagen
                                    |error LLAVE_C listImagenes
                                    |error LLAVE_C LLAVE_C strTiempo
                                    ;