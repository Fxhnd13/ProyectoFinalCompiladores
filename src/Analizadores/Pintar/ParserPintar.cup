package Analizadores.Pintar;

import Analizadores.Objetos.Instrucciones.AsignacionInstruccion;
import Analizadores.Objetos.Instrucciones.Instruccion;
import Analizadores.Objetos.Instrucciones.MientrasInstruccion;
import Analizadores.Objetos.Instrucciones.PintarInstruccion;
import Analizadores.Objetos.Instrucciones.SiInstruccion;
import Analizadores.Objetos.Nodo;
import Analizadores.Objetos.TablaDeSimbolos;
import Analizadores.Objetos.Token;
import Analizadores.Objetos.Variable;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

action code {:
    
//    
//    private void verificarValores(String lienzo, List<Instruccion> instrucciones){
//        for(Instruccion instruccion: instrucciones){
//            switch(instruccion.getTipo()){
//                case "PINTAR":{
//                    if(!getLienzo(lienzo).existeColor((String)((PintarInstruccion) instruccion.getInstruccion()).getIdColor().evaluar(variables))) listErrores.add("No existe el color de la instruccion pintar declarada en la linea: "+instruccion.getLinea()+", columna: "+instruccion.getColumna());
//                    if(!getLienzo(lienzo).existeImagen((String)((PintarInstruccion) instruccion.getInstruccion()).getIdImagen().evaluar(variables))) listErrores.add("No existe la imagen de la instruccion pintar declarada en la linea:"+instruccion.getLinea()+", columna: "+instruccion.getColumna());
//                    break;
//                }
//                case "WHILE":{
//                    verificarValores(lienzo, ((MientrasInstruccion) instruccion.getInstruccion()).getInstrucciones());
//                    break;
//                }
//                case "IF":{
//                    verificarValores(lienzo, ((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSi());
//                    if(((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSiNo()!=null){
//                        verificarValores(lienzo, ((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSiNo());
//                    }
//                    break;
//                }
//            }    
//        }
//    }
    
    private Lienzo getLienzo(String id){
        Lienzo lienzo = null;
        for(Lienzo temporal : lienzos){
            if(temporal.getId().equals(id)) lienzo = temporal;
        }
        return lienzo;
    }

    private boolean existeLienzo(String id){
        boolean valor = false;
        if(lienzos != null){
            for(Lienzo lienzo : lienzos){
                if(lienzo.getId().equals(id)) valor = true;
            }
        }
        return valor;
    }

:}

parser code {:
        
        private List<String> listErrores;
        private List<Lienzo> lienzos;
        private TablaDeSimbolos variables;
        int pasada;

        public ParserPintar(LexerPintar lex, List<Lienzo> a, int paso) { 
            super(lex);   
            listErrores = lex.getErrorsList();
            variables = new TablaDeSimbolos();
            lienzos = a;
            pasada = paso;
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            if(pasada == 2){
                String message = "";
                StringBuilder m = new StringBuilder("Error:");
                String cadena = ((Token)s.value).getLexema();
                int linea = (((Token)s.value).getLinea());
                int columna = (((Token)s.value).getColumna());
                switch(s.toString()){
                }
                listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
            }
        }

        public List<String> getErrores(){
            return listErrores;
        }
        
        public TablaDeSimbolos getVariables(){
            return variables;
        }
        
        public void setVariables(TablaDeSimbolos a){
            variables = a;
        }
        
        public void setPasada(int a){
            pasada = a;
        }
        
:}

/* Terminals (tokens returned by the scanner). */
terminal Token                      PR_VARS, CORCHETE_A, CORCHETE_C, LLAVE_A, LLAVE_C, PARENTESIS_A, PARENTESIS_C, PR_STRING, PR_INT, PR_BOOLEAN;
terminal Token                      COMA, ID, ASIGNACION, S_SUMA, S_RESTA, S_DIV, S_MUL, PR_OR, PR_AND, COMPARADOR, ENTERO, BOOLEAN;
terminal Token                      PR_INSTRUCCIONES, PR_IF, PR_ELSE, PR_WHILE, PR_PINTAR, PR_RANGE, FINAL, CADENA;

non terminal                        S, dcls, dcl, varListString, varListInt, varListBoolean, instrLienzos, instrLienzo;
non terminal String                 asigString;
non terminal Integer                asigInt;
non terminal Boolean                varBoolean;
non terminal Nodo                   posicion, expresion;
non terminal List<Instruccion>      instrs, restoIf;
non terminal Instruccion            instr;

/* precedence */

precedence left     CORCHETE_C;
precedence left     PR_OR, PR_AND;
precedence left     COMPARADOR;
precedence left     S_SUMA, S_RESTA;
precedence left     S_MUL, S_DIV;

/* The grammar */

start with S;

S ::=                                       PR_VARS CORCHETE_A dcls CORCHETE_C instrLienzos
                                            |instrLienzos
                                            ;

dcls ::=                                    dcls dcl
                                            |dcl
                                            |error FINAL dcl
                                            |error CORCHETE_C instrLienzos
                                            ;
                                     
dcl ::=                                     PR_STRING varListString FINAL
                                            |PR_INT varListInt FINAL 
                                            |PR_BOOLEAN varListBoolean FINAL
                                            ;

varListString ::=                            varListString COMA ID:idVariable asigString:nodo {:
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("String", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                :}
                                            |ID:idVariable asigString:nodo {:
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("String", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                :}
                                            ;

asigString ::=                              ASIGNACION expresion:derecha {:
                                                    if(pasada == 1){
                                                        if(derecha != null){
                                                            if(derecha.evaluarVariables(variables, listErrores)){
                                                                if(derecha.evaluar(variables)!= null) RESULT =  derecha.evaluar(variables).toString();
                                                            }
                                                        }
                                                    }
                                                :}
                                            |
                                            ;

varListInt ::=                              varListInt COMA ID:idVariable asigInt:nodo {:
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Entero", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna()); 
                                                        }
                                                    }
                                                :}
                                            |ID:idVariable asigInt:nodo {:
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Entero", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                :}
                                            ;

asigInt ::=                                 ASIGNACION:valor expresion:derecha {:
                                                    if(pasada == 1){
                                                        if(derecha != null){
                                                            if(derecha.getTipoRetorno().equals("Entero")){
                                                                if(derecha.evaluarVariables(variables, listErrores)){
                                                                    if(derecha.evaluar(variables) != null) RESULT = Integer.parseInt(derecha.evaluar(variables).toString());
                                                                }
                                                            }else{
                                                                if(valor != null) listErrores.add("No se puede asignar un valor "+derecha.getTipoRetorno()+" a una variable tipo Entera, error en la linea: "+valor.getLinea()+", columna: "+valor.getColumna());
                                                            }
                                                        }
                                                    }
                                                :}
                                            |
                                            ;

varListBoolean ::=                          varListBoolean COMA ID:idVariable varBoolean:nodo {:
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Boolean", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());  
                                                        }
                                                    }
                                                :}
                                            |ID:idVariable varBoolean:nodo {:
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Boolean", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                :}
                                            ;
                                 
varBoolean ::=                              ASIGNACION:valor expresion:derecha {:
                                                    if(pasada == 1){
                                                        if(derecha != null){
                                                            if(derecha.getTipoRetorno().equals("Boolean")){
                                                                if(derecha.evaluarVariables(variables, listErrores)){
                                                                    if(derecha.evaluar(variables)!= null) RESULT = (boolean) derecha.evaluar(variables);
                                                                }
                                                            }else{
                                                                if(valor != null) listErrores.add("No se puede asignar un valor "+derecha.getTipoRetorno()+" a una variable tipo Boolean, error en la linea: "+valor.getLinea()+", columna: "+valor.getColumna());
                                                            }
                                                        }
                                                    }
                                                :}
                                            |   
                                            ;

instrLienzos ::=                             instrLienzos instrLienzo
                                            |instrLienzo
                                            ;

instrLienzo ::=                             PR_INSTRUCCIONES PARENTESIS_A ID:id PARENTESIS_C CORCHETE_A instrs:instrucciones CORCHETE_C {:
                                                    if(pasada == 2){
                                                        if(id != null && instrucciones != null){
                                                            if(getLienzo(id.getLexema())!= null){
                                                                getLienzo(id.getLexema()).setInstrucciones(instrucciones);
                                                            }else{
                                                                listErrores.add("No existe el lienzo especificiado en la linea: "+id.getLinea()+", columna: "+id.getColumna());
                                                            }
                                                        }
                                                    }
                                                :}
                                            |error CORCHETE_A instrs
                                            |error CORCHETE_C instrLienzo
                                            ;

instrs ::=                                  instrs:instrucciones instr:instruccion {:
                                                    if(pasada == 2){
                                                        if(instrucciones == null) instrucciones = new ArrayList<Instruccion>();
                                                        if(instruccion != null) instrucciones.add(instruccion);
                                                        RESULT = instrucciones;
                                                    }
                                                :}
                                            |instr:instruccion {:
                                                    if(pasada == 2){
                                                        ArrayList<Instruccion> instrucciones = new ArrayList<Instruccion>();
                                                        if(instruccion != null) instrucciones.add(instruccion);
                                                        RESULT = instrucciones;
                                                    }
                                                :}
                                            |error FINAL instr
                                            ;

instr ::=                                  ID:id ASIGNACION expresion:valorDerecha FINAL {:
                                                    if(pasada == 2){
                                                        if(id != null && valorDerecha != null){
                                                            if(variables.verificarDisponibilidad(id.getLexema())){
                                                                if(valorDerecha.getTipoRetorno().equals(variables.getVariable(id.getLexema()).getTipo())){
                                                                    if(valorDerecha.evaluarVariables(variables, listErrores)){
                                                                        AsignacionInstruccion instruccion = new AsignacionInstruccion();
                                                                        instruccion.setId(id.getLexema());
                                                                        instruccion.setDerecha(valorDerecha);
                                                                        Instruccion retorno = new Instruccion("Asignacion", instruccion);
                                                                        retorno.setLinea(id.getLinea()); retorno.setColumna(id.getColumna());
                                                                        RESULT = retorno;
                                                                    }
                                                                }else{
                                                                    listErrores.add("No se puede asignar a una variable tipo: "+variables.getVariable(id.getLexema()).getTipo()+" un valor tipo: "+valorDerecha.getTipoRetorno()+
                                                                        ", error en la linea: "+id.getLinea()+", columna: "+id.getColumna());
                                                                }
                                                            }else{
                                                                listErrores.add("No existe la variable utilizada, error en la linea: "+id.getLinea()+", columna: "+id.getColumna());
                                                            }   
                                                        }
                                                    }
                                                :}
                                            |PR_PINTAR:valor PARENTESIS_A expresion:idColor COMA expresion:idImagen COMA posicion:posX COMA posicion:posY PARENTESIS_C FINAL {:
                                                    if(pasada == 2){
                                                        if(valor != null && idColor != null && idImagen != null && posX != null && posY != null){
                                                            if((posX.getTipoRetorno().equals("Entero") || posX.getTipoRetorno().equals("Rango"))&&(posY.getTipoRetorno().equals("Entero") || posY.getTipoRetorno().equals("Rango"))){
                                                                PintarInstruccion instruccion = new PintarInstruccion();
                                                                instruccion.setIdColor(idColor);
                                                                instruccion.setIdImagen(idImagen);
                                                                instruccion.setPosX(posX);
                                                                instruccion.setPosY(posY);
                                                                Instruccion retorno = new Instruccion("PINTAR", instruccion);
                                                                retorno.setLinea(valor.getLinea()); retorno.setColumna(valor.getColumna());
                                                                RESULT = retorno;
                                                            }else{
                                                                listErrores.add("Error en la instruccion pintar en la linea: "+valor.getLinea()+", columna: "+valor.getColumna()+"las posiciones en x o y, no son enteros o rangos");
                                                            }
                                                        }
                                                    }
                                                :}
                                            |PR_WHILE:valor PARENTESIS_A expresion:condiciones PARENTESIS_C LLAVE_A instrs:instrucciones LLAVE_C {:
                                                    if(pasada == 2){
                                                        if(valor != null && condiciones != null && instrucciones != null){
                                                            if(condiciones.getTipoRetorno().equals("Boolean")){
                                                                MientrasInstruccion instruccion = new MientrasInstruccion();
                                                                instruccion.setCondiciones(condiciones);
                                                                instruccion.setInstrucciones(instrucciones);
                                                                Instruccion retorno = new Instruccion("WHILE", instruccion);
                                                                retorno.setLinea(valor.getLinea()); retorno.setColumna(valor.getColumna());
                                                                RESULT = retorno;
                                                            }else{
                                                                listErrores.add("Error en la instruccion while en la linea: "+valor.getLinea()+", columna: "+valor.getColumna()+"no es una condicion válida");
                                                            }
                                                        }
                                                    }
                                                :}
                                            |PR_IF:valor PARENTESIS_A expresion:condiciones PARENTESIS_C LLAVE_A instrs:instruccionesSi LLAVE_C restoIf:instruccionesSiNo {:
                                                    if(pasada == 2){
                                                        if(valor != null && condiciones != null && instruccionesSi != null){
                                                            if(condiciones.getTipoRetorno().equals("Boolean")){
                                                                SiInstruccion instruccion = new SiInstruccion();
                                                                instruccion.setCondiciones(condiciones);
                                                                instruccion.setInstruccionesSi(instruccionesSi);
                                                                instruccion.setInstruccionesSiNo(instruccionesSiNo);
                                                                Instruccion retorno = new Instruccion("IF", instruccion);
                                                                retorno.setLinea(valor.getLinea()); retorno.setColumna(valor.getColumna());
                                                                RESULT = retorno;
                                                            }else{
                                                                listErrores.add("Error en la instruccion if en la linea: "+valor.getLinea()+", columna: "+valor.getColumna()+"no es una condicion válida");
                                                            }
                                                        }  
                                                    }
                                                :}
                                            ;

restoIf::=                                  PR_ELSE LLAVE_A instrs:instrucciones LLAVE_C {:
                                                    if(pasada == 2){
                                                        if(instrucciones == null) instrucciones = new ArrayList<Instruccion>();
                                                        RESULT = instrucciones;
                                                    }
                                                :}
                                            |   {:
                                                    if(pasada == 2){
                                                        ArrayList<Instruccion> instrucciones = new ArrayList<Instruccion>();
                                                        RESULT = instrucciones;
                                                    }
                                                :}
                                            ;

posicion ::=                                expresion:nodo {:
                                                    if(pasada == 2){
                                                        if(nodo != null){
                                                            if(nodo.getTipoRetorno().equals("Entero")){
                                                                RESULT = nodo;
                                                            }
                                                        }
                                                    }
                                                :}
                                            |expresion:izq PR_RANGE:operador expresion:der {:
                                                    if(pasada == 2){
                                                        if(operador != null && izq != null && der != null){
                                                                if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                                    Nodo nodo = new Nodo("Rango", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }
                                                        }
                                                    }
                                                :}
                                            ;

expresion ::=                               expresion:izq S_SUMA:operador expresion:der {:
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                            Nodo nodo = new Nodo(null, operador.getLexema(), izq, der); 
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden sumar dos valores de distinto tipo o booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                :}
                                            |expresion:izq S_RESTA:operador expresion:der {:
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                            Nodo nodo = new Nodo("Entero", operador.getLexema(), izq, der); 
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden restar dos valores que no sean enteros, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                :}
                                            |expresion:izq S_MUL:operador expresion:der {:
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                            Nodo nodo = new Nodo("Entero", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden multiplicar dos valores que no sean enteros, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                :}
                                            |expresion:izq S_DIV:operador expresion:der {:
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                            Nodo nodo = new Nodo("Entero", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden dividir dos valores que no sean enteros, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                :}
                                            |expresion:izq PR_AND:operador expresion:der {:
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Boolean") && der.getTipoRetorno().equals("Boolean")){
                                                            Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden comparar dos valores que no sean booleanos con AND, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                :}
                                            |expresion:izq PR_OR:operador expresion:der {:
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Boolean") && der.getTipoRetorno().equals("Boolean")){
                                                            Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden comparar dos valores que no sean booleanos con OR, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                :}
                                            |expresion:izq COMPARADOR:operador expresion:der {:
                                                    if(operador != null && izq != null && der != null){
                                                        switch(operador.getLexema()){
                                                            case "<":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case ">":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case "<=":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case ">=":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case "==":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno())){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case "<>":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                        }
                                                    }
                                                :}
                                            |ID:valor   {:
                                                    if(valor != null){
                                                        if(variables.getVariable(valor.getLexema())!=null){
                                                            Variable variable = new Variable("Id", valor.getLexema());
                                                            Nodo nodo = new Nodo(variable, variables);
                                                            RESULT = nodo;
                                                        }
                                                    }
                                                :}
                                            |BOOLEAN:valor {:
                                                    if(valor != null){
                                                        Variable variable = new Variable("Boolean", valor.getLexema());
                                                        Nodo nodo = new Nodo("Boolean", variable);
                                                        RESULT = nodo;
                                                    }
                                                :}
                                            |CADENA:valor{:
                                                    if(valor != null){
                                                        Variable variable = new Variable("String", valor.getLexema().substring(1,valor.getLexema().length()-1));
                                                        Nodo nodo = new Nodo("String", variable);
                                                        RESULT = nodo;  
                                                    }
                                                :}
                                            |ENTERO:valor {:
                                                    if(valor != null){
                                                        Variable variable = new Variable("Entero", valor.getLexema());
                                                        Nodo nodo = new Nodo("Entero", variable);
                                                        RESULT = nodo;
                                                    }
                                                :}
                                            ;