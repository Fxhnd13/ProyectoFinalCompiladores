
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Pintar;

import Analizadores.Objetos.Instrucciones.AsignacionInstruccion;
import Analizadores.Objetos.Instrucciones.Instruccion;
import Analizadores.Objetos.Instrucciones.MientrasInstruccion;
import Analizadores.Objetos.Instrucciones.PintarInstruccion;
import Analizadores.Objetos.Instrucciones.SiInstruccion;
import Analizadores.Objetos.Nodo;
import Analizadores.Objetos.TablaDeSimbolos;
import Analizadores.Objetos.Token;
import Analizadores.Objetos.Variable;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserPintar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserPintar() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserPintar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPintar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\007\000\002\002" +
    "\003\000\002\002\005\000\002\003\004\000\002\003\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\005\006\000\002\005\004\000\002\012\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\002\000\002\006" +
    "\006\000\002\006\004\000\002\013\004\000\002\013\005" +
    "\000\002\013\005\000\002\013\002\000\002\007\006\000" +
    "\002\007\004\000\002\014\004\000\002\014\005\000\002" +
    "\014\005\000\002\014\002\000\002\010\004\000\002\010" +
    "\003\000\002\011\011\000\002\011\006\000\002\011\005" +
    "\000\002\017\004\000\002\017\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\006\000\002\021\006\000\002" +
    "\021\015\000\002\021\011\000\002\021\012\000\002\020" +
    "\006\000\002\020\002\000\002\015\003\000\002\015\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\010\003\006\004\005\032\011\001\002\000" +
    "\024\002\uffe5\003\uffe5\006\uffe5\010\uffe5\017\uffe5\032\uffe5" +
    "\033\uffe5\035\uffe5\036\uffe5\001\002\000\004\005\133\001" +
    "\002\000\020\003\021\005\117\006\131\017\016\033\022" +
    "\035\023\036\024\001\002\000\004\002\130\001\002\000" +
    "\010\002\uffff\003\113\032\011\001\002\000\004\011\012" +
    "\001\002\000\004\017\013\001\002\000\004\012\014\001" +
    "\002\000\004\005\015\001\002\000\014\003\021\017\016" +
    "\033\022\035\023\036\024\001\002\000\004\020\125\001" +
    "\002\000\016\006\uffe0\010\uffe0\017\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\001\002\000\014\006\124\017\016\033\022\035" +
    "\023\036\024\001\002\000\010\006\107\007\110\040\106" +
    "\001\002\000\004\011\073\001\002\000\004\011\064\001" +
    "\002\000\004\011\025\001\002\000\012\017\026\030\030" +
    "\031\027\041\032\001\002\000\030\012\uffcd\016\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\037\uffcd\040\uffcd\001\002\000\030\012\uffcc\016\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\037\uffcc\040\uffcc\001\002\000\030\012\uffca\016\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\037\uffca\040\uffca\001\002\000\022\016\033\021\042\022" +
    "\041\023\034\024\040\025\037\026\035\027\036\001\002" +
    "\000\030\012\uffcb\016\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\037\uffcb\040\uffcb\001\002" +
    "\000\012\017\026\030\030\031\027\041\032\001\002\000" +
    "\012\017\026\030\030\031\027\041\032\001\002\000\012" +
    "\017\026\030\030\031\027\041\032\001\002\000\012\017" +
    "\026\030\030\031\027\041\032\001\002\000\012\017\026" +
    "\030\030\031\027\041\032\001\002\000\012\017\026\030" +
    "\030\031\027\041\032\001\002\000\012\017\026\030\030" +
    "\031\027\041\032\001\002\000\012\017\026\030\030\031" +
    "\027\041\032\001\002\000\030\012\uffd4\016\uffd4\021\uffd4" +
    "\022\uffd4\023\034\024\040\025\uffd4\026\uffd4\027\uffd4\037" +
    "\uffd4\040\uffd4\001\002\000\030\012\uffd3\016\uffd3\021\uffd3" +
    "\022\uffd3\023\034\024\040\025\uffd3\026\uffd3\027\uffd3\037" +
    "\uffd3\040\uffd3\001\002\000\030\012\uffd2\016\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\037" +
    "\uffd2\040\uffd2\001\002\000\030\012\uffcf\016\uffcf\021\042" +
    "\022\041\023\034\024\040\025\uffcf\026\uffcf\027\036\037" +
    "\uffcf\040\uffcf\001\002\000\030\012\uffce\016\uffce\021\042" +
    "\022\041\023\034\024\040\025\uffce\026\uffce\027\uffce\037" +
    "\uffce\040\uffce\001\002\000\030\012\uffd0\016\uffd0\021\042" +
    "\022\041\023\034\024\040\025\uffd0\026\uffd0\027\036\037" +
    "\uffd0\040\uffd0\001\002\000\030\012\uffd1\016\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\037" +
    "\uffd1\040\uffd1\001\002\000\022\016\053\021\042\022\041" +
    "\023\034\024\040\025\037\026\035\027\036\001\002\000" +
    "\012\017\026\030\030\031\027\041\032\001\002\000\004" +
    "\016\060\001\002\000\026\012\uffd6\016\uffd6\021\042\022" +
    "\041\023\034\024\040\025\037\026\035\027\036\037\056" +
    "\001\002\000\012\017\026\030\030\031\027\041\032\001" +
    "\002\000\024\012\uffd5\016\uffd5\021\042\022\041\023\034" +
    "\024\040\025\037\026\035\027\036\001\002\000\012\017" +
    "\026\030\030\031\027\041\032\001\002\000\004\012\062" +
    "\001\002\000\004\040\063\001\002\000\016\006\uffdb\010" +
    "\uffdb\017\uffdb\033\uffdb\035\uffdb\036\uffdb\001\002\000\012" +
    "\017\026\030\030\031\027\041\032\001\002\000\022\012" +
    "\066\021\042\022\041\023\034\024\040\025\037\026\035" +
    "\027\036\001\002\000\004\007\067\001\002\000\014\003" +
    "\021\017\016\033\022\035\023\036\024\001\002\000\014" +
    "\010\072\017\016\033\022\035\023\036\024\001\002\000" +
    "\016\006\uffe1\010\uffe1\017\uffe1\033\uffe1\035\uffe1\036\uffe1" +
    "\001\002\000\016\006\uffda\010\uffda\017\uffda\033\uffda\035" +
    "\uffda\036\uffda\001\002\000\012\017\026\030\030\031\027" +
    "\041\032\001\002\000\022\012\075\021\042\022\041\023" +
    "\034\024\040\025\037\026\035\027\036\001\002\000\004" +
    "\007\076\001\002\000\014\003\021\017\016\033\022\035" +
    "\023\036\024\001\002\000\014\010\100\017\016\033\022" +
    "\035\023\036\024\001\002\000\020\006\uffd7\010\uffd7\017" +
    "\uffd7\033\uffd7\034\101\035\uffd7\036\uffd7\001\002\000\004" +
    "\007\103\001\002\000\016\006\uffd9\010\uffd9\017\uffd9\033" +
    "\uffd9\035\uffd9\036\uffd9\001\002\000\014\003\021\017\016" +
    "\033\022\035\023\036\024\001\002\000\014\010\105\017" +
    "\016\033\022\035\023\036\024\001\002\000\016\006\uffd8" +
    "\010\uffd8\017\uffd8\033\uffd8\035\uffd8\036\uffd8\001\002\000" +
    "\014\003\021\017\016\033\022\035\023\036\024\001\002" +
    "\000\006\003\113\032\011\001\002\000\014\003\021\017" +
    "\016\033\022\035\023\036\024\001\002\000\014\010\112" +
    "\017\016\033\022\035\023\036\024\001\002\000\016\006" +
    "\uffdd\010\uffdd\017\uffdd\033\uffdd\035\uffdd\036\uffdd\001\002" +
    "\000\016\003\021\005\117\017\016\033\022\035\023\036" +
    "\024\001\002\000\022\003\113\006\uffde\010\uffde\017\uffde" +
    "\032\011\033\uffde\035\uffde\036\uffde\001\002\000\024\002" +
    "\uffe6\003\uffe6\006\uffe6\010\uffe6\017\uffe6\032\uffe6\033\uffe6" +
    "\035\uffe6\036\uffe6\001\002\000\014\006\122\017\016\033" +
    "\022\035\023\036\024\001\002\000\014\003\021\017\016" +
    "\033\022\035\023\036\024\001\002\000\014\006\121\017" +
    "\016\033\022\035\023\036\024\001\002\000\024\002\uffe3" +
    "\003\uffe3\006\uffe3\010\uffe3\017\uffe3\032\uffe3\033\uffe3\035" +
    "\uffe3\036\uffe3\001\002\000\024\002\uffe2\003\uffe2\006\uffe2" +
    "\010\uffe2\017\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\001" +
    "\002\000\016\006\uffdf\010\uffdf\017\016\033\022\035\023" +
    "\036\024\001\002\000\024\002\uffe4\003\uffe4\006\uffe4\010" +
    "\uffe4\017\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4\001\002" +
    "\000\012\017\026\030\030\031\027\041\032\001\002\000" +
    "\022\021\042\022\041\023\034\024\040\025\037\026\035" +
    "\027\036\040\127\001\002\000\016\006\uffdc\010\uffdc\017" +
    "\uffdc\033\uffdc\035\uffdc\036\uffdc\001\002\000\004\002\001" +
    "\001\002\000\006\003\113\032\011\001\002\000\010\002" +
    "\ufffe\003\113\032\011\001\002\000\010\013\136\014\135" +
    "\015\134\001\002\000\004\017\200\001\002\000\004\017" +
    "\162\001\002\000\004\017\144\001\002\000\016\006\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\040\ufffc\001\002\000" +
    "\012\006\142\013\136\014\135\015\134\001\002\000\016" +
    "\006\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\040\ufffd\001" +
    "\002\000\006\003\113\032\011\001\002\000\010\002\000" +
    "\003\113\032\011\001\002\000\012\003\153\016\ufff3\020" +
    "\152\040\ufff3\001\002\000\006\016\146\040\147\001\002" +
    "\000\004\017\150\001\002\000\016\006\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\040\ufffb\001\002\000\012\003\153" +
    "\016\ufff3\020\152\040\ufff3\001\002\000\006\016\ufff8\040" +
    "\ufff8\001\002\000\012\017\026\030\030\031\027\041\032" +
    "\001\002\000\006\016\154\040\155\001\002\000\004\017" +
    "\144\001\002\000\010\013\136\014\135\015\134\001\002" +
    "\000\014\013\136\014\135\015\134\016\ufff4\040\ufff4\001" +
    "\002\000\006\016\ufff5\040\ufff5\001\002\000\024\016\ufff6" +
    "\021\042\022\041\023\034\024\040\025\037\026\035\027" +
    "\036\040\ufff6\001\002\000\006\016\ufff7\040\ufff7\001\002" +
    "\000\012\003\170\016\uffed\020\167\040\uffed\001\002\000" +
    "\006\016\164\040\165\001\002\000\004\017\166\001\002" +
    "\000\016\006\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\040" +
    "\ufffa\001\002\000\012\003\170\016\uffed\020\167\040\uffed" +
    "\001\002\000\012\017\026\030\030\031\027\041\032\001" +
    "\002\000\006\016\172\040\173\001\002\000\006\016\ufff2" +
    "\040\ufff2\001\002\000\004\017\162\001\002\000\010\013" +
    "\136\014\135\015\134\001\002\000\014\013\136\014\135" +
    "\015\134\016\uffee\040\uffee\001\002\000\006\016\uffef\040" +
    "\uffef\001\002\000\024\016\ufff0\021\042\022\041\023\034" +
    "\024\040\025\037\026\035\027\036\040\ufff0\001\002\000" +
    "\006\016\ufff1\040\ufff1\001\002\000\012\003\206\016\uffe7" +
    "\020\205\040\uffe7\001\002\000\006\016\202\040\203\001" +
    "\002\000\004\017\204\001\002\000\016\006\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\040\ufff9\001\002\000\012\003" +
    "\206\016\uffe7\020\205\040\uffe7\001\002\000\012\017\026" +
    "\030\030\031\027\041\032\001\002\000\006\016\210\040" +
    "\211\001\002\000\006\016\uffec\040\uffec\001\002\000\004" +
    "\017\200\001\002\000\010\013\136\014\135\015\134\001" +
    "\002\000\014\013\136\014\135\015\134\016\uffe8\040\uffe8" +
    "\001\002\000\006\016\uffe9\040\uffe9\001\002\000\024\016" +
    "\uffea\021\042\022\041\023\034\024\040\025\037\026\035" +
    "\027\036\040\uffea\001\002\000\006\016\uffeb\040\uffeb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\010\002\006\010\007\011\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\115\021\016" +
    "\001\001\000\002\001\001\000\004\011\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\017\021\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\051\001\001\000\004\016\050\001\001" +
    "\000\004\016\047\001\001\000\004\016\046\001\001\000" +
    "\004\016\045\001\001\000\004\016\044\001\001\000\004" +
    "\016\043\001\001\000\004\016\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\053\016\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\056\001\001\000" +
    "\002\001\001\000\006\015\060\016\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\067\021\016\001\001\000\004\021\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\076\021" +
    "\016\001\001\000\004\021\070\001\001\000\004\020\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\103\021\016\001\001\000\004\021\070\001\001\000\002" +
    "\001\001\000\006\017\122\021\016\001\001\000\006\010" +
    "\113\011\003\001\001\000\006\017\110\021\016\001\001" +
    "\000\004\021\070\001\001\000\002\001\001\000\006\017" +
    "\115\021\016\001\001\000\004\011\114\001\001\000\002" +
    "\001\001\000\004\021\070\001\001\000\006\017\117\021" +
    "\016\001\001\000\004\021\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\070\001\001\000\002\001" +
    "\001\000\004\016\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\131\011\003\001" +
    "\001\000\004\011\114\001\001\000\006\003\137\004\136" +
    "\001\001\000\004\007\200\001\001\000\004\006\162\001" +
    "\001\000\004\005\144\001\001\000\002\001\001\000\004" +
    "\004\140\001\001\000\002\001\001\000\006\010\142\011" +
    "\003\001\001\000\004\011\114\001\001\000\004\012\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\150\001\001\000\002\001\001\000\004" +
    "\016\157\001\001\000\002\001\001\000\004\005\156\001" +
    "\001\000\006\003\155\004\136\001\001\000\004\004\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\170\001\001\000" +
    "\004\016\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\174\001\001\000\006\003\173\004\136\001" +
    "\001\000\004\004\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\206\001\001\000\004\016\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\212\001\001\000\006" +
    "\003\211\004\136\001\001\000\004\004\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPintar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPintar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPintar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        private List<String> listErrores;
        private List<Lienzo> lienzos;
        private TablaDeSimbolos variables;
        int pasada;

        public ParserPintar(LexerPintar lex, List<Lienzo> a, int paso) { 
            super(lex);   
            listErrores = lex.getErrorsList();
            variables = new TablaDeSimbolos();
            lienzos = a;
            pasada = paso;
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            if(pasada == 2){
                String message = "";
                StringBuilder m = new StringBuilder("Error:");
                String cadena = ((Token)s.value).getLexema();
                int linea = (((Token)s.value).getLinea());
                int columna = (((Token)s.value).getColumna());
                switch(s.toString()){
                    case "#9": case "#10": case "#11": case "#19": case "#20": case "#24": case "#25": case "#26": case "#27": case "#28": case "#29": {
                        message = "No se esperaba una palabra reservada";
                        break;
                    }
                    case "#3": message = "No se esperaba un corchete abierto"; break;
                    case "#4": message = "No se esperaba un corchete cerrado"; break;
                    case "#5": message = "No se esperaba una llave abierta"; break;
                    case "#6": message = "No se esperaba una llave cerrada"; break;
                    case "#7": message = "No se esperaba un parentesis abierto"; break;
                    case "#8": message = "No se esperaba un parentesis cerrado"; break;
                    case "#12": message = "No se esperaba una coma"; break;
                    case "#13": message = "No se esperaba un Id"; break;
                    case "#14": message = "No se esperaba una asignacion, verifique que antes se encuentre un Id o una palabra reservada"; break;
                    case "#15": message = "No se esperaba el operador + verifique que sus operandos sean id's o datos"; break;
                    case "#16": message = "No se esperaba el operador - verifique que sus operandos sean id's o datos"; break;
                    case "#17": message = "No se esperaba el operador / verifique que sus operandos sean id's o datos"; break;
                    case "#18": message = "No se esperaba el operador * verifique que sus operandos sean id's o datos"; break;
                    case "#21": message = "No se esperaba un comparador, verifique que los valores a comparar sean id's o datos"; break;
                    case "#22": message = "No se esperaba un valor entero"; break;
                    case "#23": message = "No se esperaba un valor booleano"; break;
                    case "#31": message = "No se esperaba un valor de tipo cadena"; break;
                    case "#30": message = "No se esperaba un fin de linea"; break;
                }
                listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
            }
        }

        public List<String> getErrores(){
            return listErrores;
        }
        
        public TablaDeSimbolos getVariables(){
            return variables;
        }
        
        public void setVariables(TablaDeSimbolos a){
            variables = a;
        }
        
        public void setPasada(int a){
            pasada = a;
        }

        public void setErrores(List<String> e){
            listErrores = e;
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserPintar$actions {


    
//    
//    private void verificarValores(String lienzo, List<Instruccion> instrucciones){
//        for(Instruccion instruccion: instrucciones){
//            switch(instruccion.getTipo()){
//                case "PINTAR":{
//                    if(!getLienzo(lienzo).existeColor((String)((PintarInstruccion) instruccion.getInstruccion()).getIdColor().evaluar(variables))) listErrores.add("No existe el color de la instruccion pintar declarada en la linea: "+instruccion.getLinea()+", columna: "+instruccion.getColumna());
//                    if(!getLienzo(lienzo).existeImagen((String)((PintarInstruccion) instruccion.getInstruccion()).getIdImagen().evaluar(variables))) listErrores.add("No existe la imagen de la instruccion pintar declarada en la linea:"+instruccion.getLinea()+", columna: "+instruccion.getColumna());
//                    break;
//                }
//                case "WHILE":{
//                    verificarValores(lienzo, ((MientrasInstruccion) instruccion.getInstruccion()).getInstrucciones());
//                    break;
//                }
//                case "IF":{
//                    verificarValores(lienzo, ((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSi());
//                    if(((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSiNo()!=null){
//                        verificarValores(lienzo, ((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSiNo());
//                    }
//                    break;
//                }
//            }    
//        }
//    }
    
    private Lienzo getLienzo(String id){
        Lienzo lienzo = null;
        for(Lienzo temporal : lienzos){
            if(temporal.getId().equals(id)) lienzo = temporal;
        }
        return lienzo;
    }

    private boolean existeLienzo(String id){
        boolean valor = false;
        if(lienzos != null){
            for(Lienzo lienzo : lienzos){
                if(lienzo.getId().equals(id)) valor = true;
            }
        }
        return valor;
    }


  private final ParserPintar parser;

  /** Constructor */
  CUP$ParserPintar$actions(ParserPintar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserPintar$do_action_part00000000(
    int                        CUP$ParserPintar$act_num,
    java_cup.runtime.lr_parser CUP$ParserPintar$parser,
    java.util.Stack            CUP$ParserPintar$stack,
    int                        CUP$ParserPintar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPintar$result;

      /* select the action based on the action number */
      switch (CUP$ParserPintar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		RESULT = start_val;
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPintar$parser.done_parsing();
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PR_VARS CORCHETE_A dcls CORCHETE_C instrLienzos 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= instrLienzos 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= error CORCHETE_C instrLienzos 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dcls ::= dcls dcl 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcls",1, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dcls ::= dcl 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcls",1, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dcl ::= PR_STRING varListString FINAL 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcl",2, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dcl ::= PR_INT varListInt FINAL 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcl",2, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dcl ::= PR_BOOLEAN varListBoolean FINAL 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcl",2, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varListString ::= varListString COMA ID asigString 
            {
              Object RESULT =null;
		int idVariableleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int idVariableright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token idVariable = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		String nodo = (String)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("String", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListString",3, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varListString ::= ID asigString 
            {
              Object RESULT =null;
		int idVariableleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int idVariableright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token idVariable = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		String nodo = (String)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("String", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListString",3, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asigString ::= ASIGNACION expresion 
            {
              String RESULT =null;
		int derechaleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derecharight = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo derecha = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(derecha != null){
                                                            if(derecha.evaluarVariables(variables, listErrores)){
                                                                if(derecha.evaluar(variables)!= null) RESULT =  derecha.evaluar(variables).toString();
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigString",8, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asigString ::= error COMA varListString 
            {
              String RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigString",8, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asigString ::= error FINAL dcls 
            {
              String RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigString",8, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asigString ::= 
            {
              String RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigString",8, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varListInt ::= varListInt COMA ID asigInt 
            {
              Object RESULT =null;
		int idVariableleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int idVariableright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token idVariable = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Integer nodo = (Integer)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Entero", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna()); 
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListInt",4, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varListInt ::= ID asigInt 
            {
              Object RESULT =null;
		int idVariableleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int idVariableright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token idVariable = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Integer nodo = (Integer)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Entero", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListInt",4, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asigInt ::= ASIGNACION expresion 
            {
              Integer RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derechaleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derecharight = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo derecha = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(derecha != null){
                                                            if(derecha.getTipoRetorno().equals("Entero")){
                                                                if(derecha.evaluarVariables(variables, listErrores)){
                                                                    if(derecha.evaluar(variables) != null) RESULT = Integer.parseInt(derecha.evaluar(variables).toString());
                                                                }
                                                            }else{
                                                                if(valor != null) listErrores.add("No se puede asignar un valor "+derecha.getTipoRetorno()+" a una variable tipo Entera, error en la linea: "+valor.getLinea()+", columna: "+valor.getColumna());
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigInt",9, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asigInt ::= error COMA varListInt 
            {
              Integer RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigInt",9, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asigInt ::= error FINAL dcls 
            {
              Integer RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigInt",9, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asigInt ::= 
            {
              Integer RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigInt",9, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varListBoolean ::= varListBoolean COMA ID varBoolean 
            {
              Object RESULT =null;
		int idVariableleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int idVariableright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token idVariable = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Boolean nodo = (Boolean)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Boolean", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());  
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListBoolean",5, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // varListBoolean ::= ID varBoolean 
            {
              Object RESULT =null;
		int idVariableleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int idVariableright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token idVariable = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Boolean nodo = (Boolean)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(idVariable != null){
                                                            Variable variable = new Variable("Boolean", nodo);
                                                            variable.setId(idVariable.getLexema());
                                                            if(!variables.addVariable(variable)) listErrores.add("Ya se encuentra una variable declarada con el id: "+idVariable.getLexema()+", error en la Linea: "+idVariable.getLinea()+", columna: "+idVariable.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListBoolean",5, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // varBoolean ::= ASIGNACION expresion 
            {
              Boolean RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derechaleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derecharight = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo derecha = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 1){
                                                        if(derecha != null){
                                                            if(derecha.getTipoRetorno().equals("Boolean")){
                                                                if(derecha.evaluarVariables(variables, listErrores)){
                                                                    if(derecha.evaluar(variables)!= null) RESULT = (boolean) derecha.evaluar(variables);
                                                                }
                                                            }else{
                                                                if(valor != null) listErrores.add("No se puede asignar un valor "+derecha.getTipoRetorno()+" a una variable tipo Boolean, error en la linea: "+valor.getLinea()+", columna: "+valor.getColumna());
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varBoolean",10, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // varBoolean ::= error COMA varListBoolean 
            {
              Boolean RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varBoolean",10, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // varBoolean ::= error FINAL dcls 
            {
              Boolean RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varBoolean",10, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // varBoolean ::= 
            {
              Boolean RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varBoolean",10, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrLienzos ::= instrLienzos instrLienzo 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzos",6, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrLienzos ::= instrLienzo 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzos",6, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrLienzo ::= PR_INSTRUCCIONES PARENTESIS_A ID PARENTESIS_C CORCHETE_A instrs CORCHETE_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		
                                                    if(pasada == 2){
                                                        if(id != null && instrucciones != null){
                                                            if(getLienzo(id.getLexema())!= null){
                                                                getLienzo(id.getLexema()).setInstrucciones(instrucciones);
                                                            }else{
                                                                listErrores.add("No existe el lienzo especificiado en la linea: "+id.getLinea()+", columna: "+id.getColumna());
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzo",7, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrLienzo ::= error CORCHETE_A instrs CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzo",7, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrLienzo ::= error instrs CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzo",7, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrs ::= instrs instr 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 2){
                                                        if(instrucciones == null) instrucciones = new ArrayList<Instruccion>();
                                                        if(instruccion != null) instrucciones.add(instruccion);
                                                        RESULT = instrucciones;
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",13, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrs ::= instr 
            {
              List<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 2){
                                                        ArrayList<Instruccion> instrucciones = new ArrayList<Instruccion>();
                                                        if(instruccion != null) instrucciones.add(instruccion);
                                                        RESULT = instrucciones;
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",13, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrs ::= error FINAL instrs 
            {
              List<Instruccion> RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",13, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrs ::= error CORCHETE_C instrLienzos 
            {
              List<Instruccion> RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",13, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrs ::= error LLAVE_A instrs LLAVE_C 
            {
              List<Instruccion> RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",13, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instr ::= ID ASIGNACION expresion FINAL 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)).value;
		int valorDerechaleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int valorDerecharight = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Nodo valorDerecha = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		
                                                    if(pasada == 2){
                                                        if(id != null && valorDerecha != null){
                                                            if(variables.verificarDisponibilidad(id.getLexema())){
                                                                if(valorDerecha.getTipoRetorno().equals(variables.getVariable(id.getLexema()).getTipo())){
                                                                    if(valorDerecha.evaluarVariables(variables, listErrores)){
                                                                        AsignacionInstruccion instruccion = new AsignacionInstruccion();
                                                                        instruccion.setId(id.getLexema());
                                                                        instruccion.setDerecha(valorDerecha);
                                                                        Instruccion retorno = new Instruccion("Asignacion", instruccion);
                                                                        retorno.setLinea(id.getLinea()); retorno.setColumna(id.getColumna());
                                                                        RESULT = retorno;
                                                                    }
                                                                }else{
                                                                    listErrores.add("No se puede asignar a una variable tipo: "+variables.getVariable(id.getLexema()).getTipo()+" un valor tipo: "+valorDerecha.getTipoRetorno()+
                                                                        ", error en la linea: "+id.getLinea()+", columna: "+id.getColumna());
                                                                }
                                                            }else{
                                                                listErrores.add("No existe la variable utilizada, error en la linea: "+id.getLinea()+", columna: "+id.getColumna());
                                                            }   
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instr",15, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instr ::= PR_PINTAR PARENTESIS_A expresion COMA expresion COMA posicion COMA posicion PARENTESIS_C FINAL 
            {
              Instruccion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-10)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-10)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-10)).value;
		int idColorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-8)).left;
		int idColorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-8)).right;
		Nodo idColor = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-8)).value;
		int idImagenleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)).left;
		int idImagenright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)).right;
		Nodo idImagen = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)).value;
		int posXleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).left;
		int posXright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).right;
		Nodo posX = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).value;
		int posYleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int posYright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo posY = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		
                                                    if(pasada == 2){
                                                        if(valor != null && idColor != null && idImagen != null && posX != null && posY != null){
                                                            if((posX.getTipoRetorno().equals("Entero") || posX.getTipoRetorno().equals("Rango"))&&(posY.getTipoRetorno().equals("Entero") || posY.getTipoRetorno().equals("Rango"))){
                                                                PintarInstruccion instruccion = new PintarInstruccion();
                                                                instruccion.setIdColor(idColor);
                                                                instruccion.setIdImagen(idImagen);
                                                                instruccion.setPosX(posX);
                                                                instruccion.setPosY(posY);
                                                                Instruccion retorno = new Instruccion("PINTAR", instruccion);
                                                                retorno.setLinea(valor.getLinea()); retorno.setColumna(valor.getColumna());
                                                                RESULT = retorno;
                                                            }else{
                                                                listErrores.add("Error en la instruccion pintar en la linea: "+valor.getLinea()+", columna: "+valor.getColumna()+"las posiciones en x o y, no son enteros o rangos");
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instr",15, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instr ::= PR_WHILE PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrs LLAVE_C 
            {
              Instruccion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)).value;
		int condicionesleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).left;
		int condicionesright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).right;
		Nodo condiciones = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		
                                                    if(pasada == 2){
                                                        if(valor != null && condiciones != null && instrucciones != null){
                                                            if(condiciones.getTipoRetorno().equals("Boolean")){
                                                                MientrasInstruccion instruccion = new MientrasInstruccion();
                                                                instruccion.setCondiciones(condiciones);
                                                                instruccion.setInstrucciones(instrucciones);
                                                                Instruccion retorno = new Instruccion("WHILE", instruccion);
                                                                retorno.setLinea(valor.getLinea()); retorno.setColumna(valor.getColumna());
                                                                RESULT = retorno;
                                                            }else{
                                                                listErrores.add("Error en la instruccion while en la linea: "+valor.getLinea()+", columna: "+valor.getColumna()+"no es una condicion válida");
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instr",15, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= PR_IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrs LLAVE_C restoIf 
            {
              Instruccion RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-7)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-7)).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-7)).value;
		int condicionesleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-5)).left;
		int condicionesright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-5)).right;
		Nodo condiciones = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-5)).value;
		int instruccionesSileft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int instruccionesSiright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		List<Instruccion> instruccionesSi = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int instruccionesSiNoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int instruccionesSiNoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		List<Instruccion> instruccionesSiNo = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 2){
                                                        if(valor != null && condiciones != null && instruccionesSi != null){
                                                            if(condiciones.getTipoRetorno().equals("Boolean")){
                                                                SiInstruccion instruccion = new SiInstruccion();
                                                                instruccion.setCondiciones(condiciones);
                                                                instruccion.setInstruccionesSi(instruccionesSi);
                                                                instruccion.setInstruccionesSiNo(instruccionesSiNo);
                                                                Instruccion retorno = new Instruccion("IF", instruccion);
                                                                retorno.setLinea(valor.getLinea()); retorno.setColumna(valor.getColumna());
                                                                RESULT = retorno;
                                                            }else{
                                                                listErrores.add("Error en la instruccion if en la linea: "+valor.getLinea()+", columna: "+valor.getColumna()+"no es una condicion válida");
                                                            }
                                                        }  
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instr",15, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // restoIf ::= PR_ELSE LLAVE_A instrs LLAVE_C 
            {
              List<Instruccion> RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		List<Instruccion> instrucciones = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		
                                                    if(pasada == 2){
                                                        if(instrucciones == null) instrucciones = new ArrayList<Instruccion>();
                                                        RESULT = instrucciones;
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("restoIf",14, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // restoIf ::= 
            {
              List<Instruccion> RESULT =null;
		
                                                    if(pasada == 2){
                                                        ArrayList<Instruccion> instrucciones = new ArrayList<Instruccion>();
                                                        RESULT = instrucciones;
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("restoIf",14, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // posicion ::= expresion 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 2){
                                                        if(nodo != null){
                                                            if(nodo.getTipoRetorno().equals("Entero")){
                                                                RESULT = nodo;
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("posicion",11, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // posicion ::= expresion PR_RANGE expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(pasada == 2){
                                                        if(operador != null && izq != null && der != null){
                                                                if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                                    Nodo nodo = new Nodo("Rango", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("posicion",11, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion S_SUMA expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                            Nodo nodo = new Nodo(null, operador.getLexema(), izq, der); 
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden sumar dos valores de distinto tipo o booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion S_RESTA expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                            Nodo nodo = new Nodo("Entero", operador.getLexema(), izq, der); 
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden restar dos valores que no sean enteros, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion S_MUL expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                            Nodo nodo = new Nodo("Entero", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden multiplicar dos valores que no sean enteros, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion S_DIV expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Entero") && der.getTipoRetorno().equals("Entero")){
                                                            Nodo nodo = new Nodo("Entero", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden dividir dos valores que no sean enteros, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion PR_AND expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Boolean") && der.getTipoRetorno().equals("Boolean")){
                                                            Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden comparar dos valores que no sean booleanos con AND, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion PR_OR expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(operador != null && izq != null && der != null){
                                                        if(izq.getTipoRetorno().equals("Boolean") && der.getTipoRetorno().equals("Boolean")){
                                                            Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                            nodo.evaluar(variables);
                                                            RESULT = nodo;
                                                        }else{
                                                            listErrores.add("No se pueden comparar dos valores que no sean booleanos con OR, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion COMPARADOR expresion 
            {
              Nodo RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).right;
		Nodo izq = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)).value;
		int operadorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int operadorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Token operador = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Nodo der = (Nodo)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(operador != null && izq != null && der != null){
                                                        switch(operador.getLexema()){
                                                            case "<":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case ">":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case "<=":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case ">=":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case "==":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno())){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                            case "<>":{
                                                                if(izq.getTipoRetorno().equals(der.getTipoRetorno()) && !izq.getTipoRetorno().equals("Boolean")){
                                                                    Nodo nodo = new Nodo("Boolean", operador.getLexema(), izq, der);
                                                                    nodo.evaluar(variables);
                                                                    RESULT = nodo;
                                                                }else{
                                                                    listErrores.add("Los tipos de los valores a comparar no coinciden, o son booleanos, error en la Linea: "+operador.getLinea()+", columna: "+operador.getColumna());
                                                                }
                                                            }
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= ID 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(valor != null){
                                                        if(variables.getVariable(valor.getLexema())!=null){
                                                            Variable variable = new Variable("Id", valor.getLexema());
                                                            Nodo nodo = new Nodo(variable, variables);
                                                            RESULT = nodo;
                                                        }
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= BOOLEAN 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(valor != null){
                                                        Variable variable = new Variable("Boolean", valor.getLexema());
                                                        Nodo nodo = new Nodo("Boolean", variable);
                                                        RESULT = nodo;
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(valor != null){
                                                        Variable variable = new Variable("String", valor.getLexema().substring(1,valor.getLexema().length()-1));
                                                        Nodo nodo = new Nodo("String", variable);
                                                        RESULT = nodo;  
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()).right;
		Token valor = (Token)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.peek()).value;
		
                                                    if(valor != null){
                                                        Variable variable = new Variable("Entero", valor.getLexema());
                                                        Nodo nodo = new Nodo("Entero", variable);
                                                        RESULT = nodo;
                                                    }
                                                
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserPintar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserPintar$do_action(
    int                        CUP$ParserPintar$act_num,
    java_cup.runtime.lr_parser CUP$ParserPintar$parser,
    java.util.Stack            CUP$ParserPintar$stack,
    int                        CUP$ParserPintar$top)
    throws java.lang.Exception
    {
              return CUP$ParserPintar$do_action_part00000000(
                               CUP$ParserPintar$act_num,
                               CUP$ParserPintar$parser,
                               CUP$ParserPintar$stack,
                               CUP$ParserPintar$top);
    }
}

}
