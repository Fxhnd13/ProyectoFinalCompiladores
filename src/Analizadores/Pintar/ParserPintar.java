
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores.Pintar;

import Analizadores.Objetos.Instrucciones.Instruccion;
import Analizadores.Objetos.Instrucciones.MientrasInstruccion;
import Analizadores.Objetos.Instrucciones.PintarInstruccion;
import Analizadores.Objetos.Instrucciones.SiInstruccion;
import Analizadores.Objetos.TablaDeSimbolos;
import Analizadores.Objetos.Token;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserPintar extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserPintar() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserPintar(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserPintar(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\005\005\000\002\005\003\000" +
    "\002\006\004\000\002\007\004\000\002\007\002\000\002" +
    "\010\005\000\002\010\003\000\002\011\004\000\002\012" +
    "\004\000\002\012\002\000\002\013\005\000\002\013\003" +
    "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
    "\002\015\003\000\002\017\004\000\002\017\003\000\002" +
    "\016\011\000\002\020\006\000\002\020\015\000\002\020" +
    "\011\000\002\020\012\000\002\021\006\000\002\022\003" +
    "\000\002\022\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\003\000\002\023" +
    "\003\000\002\023\005\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\006\004\005\033\010\001\002\000\006\002" +
    "\uffe9\033\uffe9\001\002\000\004\005\116\001\002\000\004" +
    "\002\115\001\002\000\006\002\uffff\033\010\001\002\000" +
    "\004\011\014\001\002\000\004\033\010\001\002\000\006" +
    "\002\000\033\010\001\002\000\006\002\uffea\033\uffea\001" +
    "\002\000\004\017\015\001\002\000\004\012\016\001\002" +
    "\000\004\005\017\001\002\000\012\017\020\034\022\036" +
    "\023\037\024\001\002\000\004\020\112\001\002\000\004" +
    "\006\111\001\002\000\004\011\076\001\002\000\004\011" +
    "\070\001\002\000\004\011\025\001\002\000\012\017\026" +
    "\025\027\031\032\032\030\001\002\000\032\006\uffd9\012" +
    "\uffd9\016\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\040\uffd9\041\uffd9\001\002\000\004\017" +
    "\064\001\002\000\032\006\uffd8\012\uffd8\016\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\040" +
    "\uffd8\041\uffd8\001\002\000\022\016\033\021\042\022\040" +
    "\023\034\024\041\026\037\027\035\030\036\001\002\000" +
    "\032\006\uffd6\012\uffd6\016\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\026\uffd6\027\uffd6\030\uffd6\040\uffd6\041\uffd6\001" +
    "\002\000\012\017\026\025\027\031\032\032\030\001\002" +
    "\000\012\017\026\025\027\031\032\032\030\001\002\000" +
    "\012\017\026\025\027\031\032\032\030\001\002\000\012" +
    "\017\026\025\027\031\032\032\030\001\002\000\012\017" +
    "\026\025\027\031\032\032\030\001\002\000\012\017\026" +
    "\025\027\031\032\032\030\001\002\000\012\017\026\025" +
    "\027\031\032\032\030\001\002\000\012\017\026\025\027" +
    "\031\032\032\030\001\002\000\032\006\uffe0\012\uffe0\016" +
    "\uffe0\021\uffe0\022\uffe0\023\034\024\041\026\uffe0\027\uffe0" +
    "\030\uffe0\040\uffe0\041\uffe0\001\002\000\032\006\uffde\012" +
    "\uffde\016\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde" +
    "\027\uffde\030\uffde\040\uffde\041\uffde\001\002\000\032\006" +
    "\uffdf\012\uffdf\016\uffdf\021\uffdf\022\uffdf\023\034\024\041" +
    "\026\uffdf\027\uffdf\030\uffdf\040\uffdf\041\uffdf\001\002\000" +
    "\032\006\uffdb\012\uffdb\016\uffdb\021\042\022\040\023\034" +
    "\024\041\026\uffdb\027\uffdb\030\036\040\uffdb\041\uffdb\001" +
    "\002\000\032\006\uffda\012\uffda\016\uffda\021\042\022\040" +
    "\023\034\024\041\026\uffda\027\uffda\030\uffda\040\uffda\041" +
    "\uffda\001\002\000\032\006\uffdc\012\uffdc\016\uffdc\021\042" +
    "\022\040\023\034\024\041\026\uffdc\027\uffdc\030\036\040" +
    "\uffdc\041\uffdc\001\002\000\032\006\uffdd\012\uffdd\016\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\040\uffdd\041\uffdd\001\002\000\022\016\053\021\042" +
    "\022\040\023\034\024\041\026\037\027\035\030\036\001" +
    "\002\000\012\017\026\025\027\031\032\032\030\001\002" +
    "\000\004\016\060\001\002\000\026\012\uffe2\016\uffe2\021" +
    "\042\022\040\023\034\024\041\026\037\027\035\030\036" +
    "\040\056\001\002\000\012\017\026\025\027\031\032\032" +
    "\030\001\002\000\024\012\uffe1\016\uffe1\021\042\022\040" +
    "\023\034\024\041\026\037\027\035\030\036\001\002\000" +
    "\012\017\026\025\027\031\032\032\030\001\002\000\004" +
    "\012\062\001\002\000\004\041\063\001\002\000\006\006" +
    "\uffe6\010\uffe6\001\002\000\006\017\uffeb\025\uffeb\001\002" +
    "\000\006\017\066\025\067\001\002\000\006\017\uffec\025" +
    "\uffec\001\002\000\032\006\uffd7\012\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\040" +
    "\uffd7\041\uffd7\001\002\000\012\017\026\025\027\031\032" +
    "\032\030\001\002\000\022\012\072\021\042\022\040\023" +
    "\034\024\041\026\037\027\035\030\036\001\002\000\004" +
    "\007\073\001\002\000\012\017\020\034\022\036\023\037" +
    "\024\001\002\000\004\010\075\001\002\000\006\006\uffe5" +
    "\010\uffe5\001\002\000\012\017\026\025\027\031\032\032" +
    "\030\001\002\000\022\012\100\021\042\022\040\023\034" +
    "\024\041\026\037\027\035\030\036\001\002\000\004\007" +
    "\101\001\002\000\012\017\020\034\022\036\023\037\024" +
    "\001\002\000\004\010\103\001\002\000\004\035\104\001" +
    "\002\000\004\007\106\001\002\000\006\006\uffe4\010\uffe4" +
    "\001\002\000\012\017\020\034\022\036\023\037\024\001" +
    "\002\000\004\010\110\001\002\000\006\006\uffe3\010\uffe3" +
    "\001\002\000\006\002\uffe8\033\uffe8\001\002\000\012\017" +
    "\026\025\027\031\032\032\030\001\002\000\022\021\042" +
    "\022\040\023\034\024\041\026\037\027\035\030\036\041" +
    "\114\001\002\000\006\006\uffe7\010\uffe7\001\002\000\004" +
    "\002\001\001\002\000\010\013\122\014\120\015\117\001" +
    "\002\000\010\006\uffed\016\uffed\020\144\001\002\000\004" +
    "\017\134\001\002\000\004\006\133\001\002\000\004\017" +
    "\123\001\002\000\010\006\ufff6\016\ufff6\020\131\001\002" +
    "\000\006\006\ufffd\016\126\001\002\000\006\006\ufff9\016" +
    "\ufff9\001\002\000\004\017\123\001\002\000\006\006\ufffa" +
    "\016\ufffa\001\002\000\006\006\ufff8\016\ufff8\001\002\000" +
    "\012\017\026\025\027\031\032\032\030\001\002\000\024" +
    "\006\ufff7\016\ufff7\021\042\022\040\023\034\024\041\026" +
    "\037\027\035\030\036\001\002\000\004\033\ufffe\001\002" +
    "\000\010\006\ufff1\016\ufff1\020\141\001\002\000\006\006" +
    "\ufff4\016\ufff4\001\002\000\006\006\ufffc\016\137\001\002" +
    "\000\004\017\134\001\002\000\006\006\ufff5\016\ufff5\001" +
    "\002\000\012\017\026\025\027\031\032\032\030\001\002" +
    "\000\006\006\ufff3\016\ufff3\001\002\000\024\006\ufff2\016" +
    "\ufff2\021\042\022\040\023\034\024\041\026\037\027\035" +
    "\030\036\001\002\000\012\017\026\025\027\031\032\032" +
    "\030\001\002\000\006\006\ufffb\016\147\001\002\000\006" +
    "\006\uffef\016\uffef\001\002\000\010\006\uffed\016\uffed\020" +
    "\144\001\002\000\006\006\ufff0\016\ufff0\001\002\000\024" +
    "\006\uffee\016\uffee\021\042\022\040\023\034\024\041\026" +
    "\037\027\035\030\036\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\012\002\005\003\010\016\003\017\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\012\001\001\000\002\001\001\000\006\016" +
    "\003\017\011\001\001\000\004\016\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\030\001\001\000\002\001\001\000\004" +
    "\015\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\051\001\001\000\004\023\050" +
    "\001\001\000\004\023\047\001\001\000\004\023\046\001" +
    "\001\000\004\023\045\001\001\000\004\023\044\001\001" +
    "\000\004\023\043\001\001\000\004\023\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\053\023\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\056\001" +
    "\001\000\002\001\001\000\006\022\060\023\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\101\001\001\000\002" +
    "\001\001\000\004\021\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\120\001\001\000\006\013\144\014\145\001" +
    "\001\000\006\010\135\011\134\001\001\000\002\001\001" +
    "\000\006\005\123\006\124\001\001\000\004\007\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\137\001\001\000\002\001\001\000\004\023\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\147\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserPintar$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserPintar$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserPintar$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        private List<String> listErrores;
        private List<Lienzo> lienzos;
        private TablaDeSimbolos variables;

        public ParserPintar(LexerPintar lex, List<Lienzo> a) { 
            super(lex);   
            listErrores = lex.getErrorsList();
            variables = new TablaDeSimbolos();
            lienzos = a;
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = ((Token)s.value).getLexema();
            int linea = (((Token)s.value).getLinea());
            int columna = (((Token)s.value).getColumna());
            switch(s.toString()){
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }

        public List<String> getErrores(){
            return listErrores;
        }
        
        public TablaDeSimbolos getVariables(){
            return variables;
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserPintar$actions {


    
    private void verificarValores(String idLienzo, List<Instruccion> instrucciones){
        for(Instruccion instruccion: instrucciones){
            switch(instruccion.getTipo()){
                case "PINTAR":{
                    if(!getLienzo(idLienzo).existeColor(((PintarInstruccion)instruccion).getIdColor())) listErrores.add("No existe el color de la instruccion pintar declarada en la linea: "+instruccion.getLinea()+", columna: "+instruccion.getColumna());
                    if(!getLienzo(idLienzo).existeImagen(((PintarInstruccion)instruccion).getIdImagen())) listErrores.add("No existe la imagen de la instruccion pintar declarada en la linea:"+instruccion.getLinea()+", columna: "+instruccion.getColumna()");
                    break;
                }
                case "while":{
                    verificarValores(lienzo, ((MientrasInstruccion) instruccion.getInstruccion()).getInstrucciones());
                    break;
                }
                case "if":{
                    verificarValores(lienzo, ((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSi());
                    if(((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSiNo()!=null){
                        verificarValores(lienzo, ((SiInstruccion) instruccion.getInstruccion()).getInstruccionesSiNo());
                    }
                    break;
                }
            }    
        }
    }
    
    private Lienzo getLienzo(String id){
        Lienzo lienzo = null;
        for(Lienzo temporal : lienzos){
            if(temporal.getId().equals(id)) lienzo = temporal;
        }
        return lienzo;
    }

    private boolean existeLienzo(String id){
        boolean valor = false;
        if(lienzos != null){
            for(Lienzo lienzo : lienzos){
                if(lienzo.getId().equals(id)) valor = true;
            }
        }
        return valor;
    }


  private final ParserPintar parser;

  /** Constructor */
  CUP$ParserPintar$actions(ParserPintar parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserPintar$do_action_part00000000(
    int                        CUP$ParserPintar$act_num,
    java_cup.runtime.lr_parser CUP$ParserPintar$parser,
    java.util.Stack            CUP$ParserPintar$stack,
    int                        CUP$ParserPintar$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserPintar$result;

      /* select the action based on the action number */
      switch (CUP$ParserPintar$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)).value;
		RESULT = start_val;
              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserPintar$parser.done_parsing();
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= variables instrLienzos 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= instrLienzos 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variables ::= PR_VARS CORCHETE_A dcl CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("variables",1, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dcl ::= PR_STRING varListString 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcl",2, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dcl ::= PR_INT varListInt 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcl",2, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dcl ::= PR_BOOLEAN varListBoolean 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("dcl",2, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varListString ::= varListString COMA varString 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListString",3, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varListString ::= varString 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListString",3, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varString ::= ID asigString 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varString",4, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asigString ::= ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigString",5, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asigString ::= 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigString",5, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varListInt ::= varListInt COMA varInt 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListInt",6, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varListInt ::= varInt 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListInt",6, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varInt ::= ID asigInt 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varInt",7, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asigInt ::= ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigInt",8, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asigInt ::= 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("asigInt",8, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varListBoolean ::= varListBoolean COMA varBoolean 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListBoolean",9, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varListBoolean ::= varBoolean 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varListBoolean",9, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varBoolean ::= ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varBoolean",10, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varBoolean ::= 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("varBoolean",10, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cadenas ::= cadenas ID 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("cadenas",11, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cadenas ::= ID 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("cadenas",11, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrLienzos ::= instrLienzos instrLienzo 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzos",13, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-1)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrLienzos ::= instrLienzo 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzos",13, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrLienzo ::= PR_INSTRUCCIONES PARENTESIS_A ID PARENTESIS_C CORCHETE_A instrs CORCHETE_C 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrLienzo",12, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrs ::= ID ASIGNACION expresion FINAL 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",14, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrs ::= PR_PINTAR PARENTESIS_A expresion COMA expresion COMA posicion COMA posicion PARENTESIS_C FINAL 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",14, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-10)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrs ::= PR_WHILE PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrs LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",14, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-6)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrs ::= PR_IF PARENTESIS_A expresion PARENTESIS_C LLAVE_A instrs LLAVE_C restoIf 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("instrs",14, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-7)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // restoIf ::= PR_ELSE LLAVE_A instrs LLAVE_C 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("restoIf",15, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-3)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // posicion ::= expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("posicion",16, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // posicion ::= expresion PR_RANGE expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("posicion",16, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion S_SUMA expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion S_RESTA expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion S_MUL expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion S_DIV expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion PR_AND expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion PR_OR expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion COMPARADOR expresion 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= COMILLA cadenas COMILLA 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.elementAt(CUP$ParserPintar$top-2)), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= ENTERO 
            {
              Object RESULT =null;

              CUP$ParserPintar$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserPintar$stack.peek()), RESULT);
            }
          return CUP$ParserPintar$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserPintar$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserPintar$do_action(
    int                        CUP$ParserPintar$act_num,
    java_cup.runtime.lr_parser CUP$ParserPintar$parser,
    java.util.Stack            CUP$ParserPintar$stack,
    int                        CUP$ParserPintar$top)
    throws java.lang.Exception
    {
              return CUP$ParserPintar$do_action_part00000000(
                               CUP$ParserPintar$act_num,
                               CUP$ParserPintar$parser,
                               CUP$ParserPintar$stack,
                               CUP$ParserPintar$top);
    }
}

}
