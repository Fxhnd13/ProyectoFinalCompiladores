/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Analizadores.Colores.LexerColores;
import Analizadores.Colores.ParserColores;
import Analizadores.Json.LexerJson;
import Analizadores.Json.ParserJson;
import Analizadores.Lienzos.LexerLienzo;
import Analizadores.Lienzos.ParserLienzo;
import Analizadores.Tiempos.LexerTiempos;
import Analizadores.Tiempos.ParserTiempos;
import Analizadores.Objetos.Atributo;
import Analizadores.Objetos.TablaDeSimbolos;
import Objetos.Lienzo;
import Analizadores.Objetos.Token;
import Analizadores.Pintar.LexerPintar;
import Analizadores.Pintar.ParserPintar;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;

/**
 *
 * @author fxhnd
 */
public class Editor extends javax.swing.JFrame {

    private List<Lienzo> lienzos = new ArrayList<Lienzo>();
    private TablaDeSimbolos variables = new TablaDeSimbolos();
    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH);
        this.GenerarOption.setEnabled(false);
        this.EditorGrafico.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DialogoReporteAnalisis = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaTokensLienzo = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TablaTokensColores = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TablaTokensTiempos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TablaTokensPintar = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaReporteSintactico = new javax.swing.JTextArea();
        PanelArchivos = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        InformacionLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        GenerarOption = new javax.swing.JMenuItem();
        EditorGrafico = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        DialogoReporteAnalisis.setSize(new java.awt.Dimension(1250, 750));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Analisis Lexico"));

        TablaTokensLienzo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Lexema", "Linea", "Columna"
            }
        ));
        jScrollPane3.setViewportView(TablaTokensLienzo);

        TablaTokensColores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Lexema", "Linea", "Columna"
            }
        ));
        jScrollPane4.setViewportView(TablaTokensColores);

        TablaTokensTiempos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Lexema", "Linea", "Columna"
            }
        ));
        jScrollPane5.setViewportView(TablaTokensTiempos);

        jLabel2.setText("Archivo Lienzo");

        jLabel3.setText("Archivo Colores");

        jLabel4.setText("Archivo Tiempos");

        jLabel5.setText("Archivo Pintar");

        TablaTokensPintar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Token", "Lexema", "Linea", "Columna"
            }
        ));
        jScrollPane6.setViewportView(TablaTokensPintar);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Analisis Sintactico"));

        TextAreaReporteSintactico.setColumns(20);
        TextAreaReporteSintactico.setRows(5);
        jScrollPane2.setViewportView(TextAreaReporteSintactico);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout DialogoReporteAnalisisLayout = new javax.swing.GroupLayout(DialogoReporteAnalisis.getContentPane());
        DialogoReporteAnalisis.getContentPane().setLayout(DialogoReporteAnalisisLayout);
        DialogoReporteAnalisisLayout.setHorizontalGroup(
            DialogoReporteAnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogoReporteAnalisisLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        DialogoReporteAnalisisLayout.setVerticalGroup(
            DialogoReporteAnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DialogoReporteAnalisisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DialogoReporteAnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Posicion:");

        jMenu1.setText("Archivo");

        jMenu3.setText("Nuevo Archivo");

        jMenuItem1.setText("Lienzos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Coleres");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Tiempos");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Pintar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenu1.add(jMenu3);

        jMenuItem5.setText("Cargar Archivo");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem7.setText("Guardar Archivo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem6.setText("Cerrar Archivo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu5.setText("Funcionalidades");

        jMenuItem11.setText("Analizar");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        GenerarOption.setText("Editor Grafico");
        GenerarOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarOptionActionPerformed(evt);
            }
        });
        jMenu5.add(GenerarOption);

        EditorGrafico.setText("Generar");
        jMenu5.add(EditorGrafico);

        jMenuBar1.add(jMenu5);

        jMenu4.setText("Ayuda");

        jMenuItem8.setText("Manual de usuario");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuItem9.setText("Manual técnico");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem10.setText("Acerca de...");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelArchivos, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InformacionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(InformacionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(PanelArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        addTab("lnz", null);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        addTab(null, null);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        addTab("clrs", null);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        addTab("tmp", null);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        addTab("pnt", null);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "¿Estás seguro de cerrar esta pestaña?");//preguntamos si de verdad quiere cerrar
        if (option == JOptionPane.YES_OPTION) {//de ser si
            if (PanelArchivos.getTabCount() == 0) {//si no hay archivos abiertos
                JOptionPane.showMessageDialog(null, "No hay pestañas para cerrar");
            } else {//si hay mas de una rchivo abierto
                int index = PanelArchivos.getSelectedIndex();
                if(((InputTab)PanelArchivos.getComponentAt(index)).isModificado()){
                    //si se detectan cambios en el archivo a cerrar sin guardar preguntamos si guardar antes de cerrar
                    option = JOptionPane.showConfirmDialog(null, "Se han detectado cambios sin guardar en el archivo seleccionado, ¿desea guardar antes de cerrar?");
                    if(option == JOptionPane.YES_OPTION){
                        RegistroArchivos.guardarArchivo((InputTab)PanelArchivos.getComponentAt(index));
                    }
                }
                try {
                    if (PanelArchivos.getTabCount() - 1 == 0) {
                        PanelArchivos.getComponentAt(0).setVisible(false);
                    }
                    PanelArchivos.remove(index);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        if(PanelArchivos.getComponentCount()>0){
            //Aqui es el codigo para guardar el archivo
            int index = PanelArchivos.getSelectedIndex();
            try {
                RegistroArchivos.guardarArchivo((InputTab)PanelArchivos.getComponentAt(index));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        JOptionPane.showMessageDialog(null, "Desarrollado Por: José Carlos Soberanis Ramírez\nCarnet: 201730246", "Informacion", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        //Se muestra el manual de usuario
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        //Se muestra el manual tecnico
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void GenerarOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarOptionActionPerformed
        try {
            String strLienzos = null, strColores = null, strTiempos=null;
            File lienzo = null, colores=null, tiempos = null, pintar = null;
            for (int i = 0; i < PanelArchivos.getComponentCount(); i++) {
                switch(((InputTab)PanelArchivos.getComponent(i)).getExtension()){
                    case "lnz" : {
                        strLienzos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        lienzo = ((InputTab)PanelArchivos.getComponent(i)).getOrigin();
                        break;
                    }
                    case "clrs" : {
                        strColores = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        colores = ((InputTab)PanelArchivos.getComponent(i)).getOrigin();
                        break;
                    }
                    case "tmp" : {
                        strTiempos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        tiempos = ((InputTab)PanelArchivos.getComponent(i)).getOrigin();
                        break;
                    }
                }
            }
            if(strLienzos == null || strColores == null || strTiempos == null){
                JOptionPane.showMessageDialog(null, "No se han cargado todos los archivos minimos necesarios", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                Pintor pintor = new Pintor();
                pintor.setLienzos(lienzos, variables);
                pintor.setFiles(lienzo, colores, tiempos, pintar);
                pintor.setVisible(true);
                this.dispose();
            }
        } catch (Exception ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GenerarOptionActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        try {
            String strLienzos = null, strColores = null, strTiempos=null, strPintar = null;
            for (int i = 0; i < PanelArchivos.getComponentCount(); i++) {
                switch(((InputTab)PanelArchivos.getComponent(i)).getExtension()){
                    case "lnz" : {
                        strLienzos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                    case "clrs" : {
                        strColores = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                    case "tmp" : {
                        strTiempos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                    case "pnt":{
                        strPintar = ((InputTab)PanelArchivos.getComponent(i)).getText();
                    }
                }
            }
            String reporteFinal = "";
            LexerLienzo lexerLienzo = null; LexerColores lexerColores = null; LexerTiempos lexerTiempos = null; LexerPintar lexerPintar = null;
            ParserLienzo parserLienzo = null; ParserColores parserColores = null; ParserTiempos parserTiempos = null; ParserPintar parserPintar = null;
            if(strLienzos != null){
                lexerLienzo = new LexerLienzo(new StringReader(strLienzos));
                parserLienzo = new ParserLienzo(lexerLienzo);
                this.lienzos = (List<Lienzo>) parserLienzo.parse().value;
                if(strColores != null){
                    lexerColores = new LexerColores(new StringReader(strColores));
                    parserColores = new ParserColores(lexerColores, lienzos);
                    parserColores.parse();
                }
                if(strTiempos != null){
                    lexerTiempos = new LexerTiempos(new StringReader(strTiempos));
                    parserTiempos = new ParserTiempos(lexerTiempos, lienzos);
                    parserTiempos.parse();
                }
                if(strPintar != null){
                    lexerPintar = new LexerPintar(new StringReader(strPintar));
                    parserPintar = new ParserPintar(lexerPintar, lienzos);
                    parserPintar.parse();
                }
                for (Lienzo lienzo : lienzos) {
                    reporteFinal += lienzo.toString();
                }
            }
            String reporteErrores = "";
            if(strLienzos != null){
                reporteErrores = "\n\n*******************Errores Archivo Lienzos********************\n\n";
                for (String error : parserLienzo.getErrores()) {
                    reporteErrores+=(error+"\n");
                }
            }
            if(strColores != null){
                reporteErrores += "\n\n*******************Errores Archivo Colores********************\n\n";
                for (String error : parserColores.getErrores()) {
                    reporteErrores+=(error+"\n");
                }
            }
            if(strTiempos != null){
                reporteErrores += "\n\n*******************Errores Archivo Tiempos********************\n\n";
                for (String error : parserTiempos.getErrores()) {
                    reporteErrores+=(error+"\n");
                }
            }
            if(strPintar != null){
                reporteErrores += "\n\n*******************Errores Archivo Pintar********************\n\n";
                for (String error : parserPintar.getErrores()) {
                    reporteErrores+=(error+"\n");
                }
                variables = parserPintar.getVariables();
            }
            if(lexerLienzo != null) addTokensToTable(0, this.TablaTokensLienzo, lexerLienzo.getTokensList());
            if(lexerColores != null) addTokensToTable(1, this.TablaTokensColores, lexerColores.getTokensList());
            if(lexerTiempos != null) addTokensToTable(2, this.TablaTokensTiempos, lexerTiempos.getTokensList());
            if(lexerPintar != null) addTokensToTable(3, this.TablaTokensPintar, lexerPintar.getTokensList());
            String finalSintactico = reporteFinal+reporteErrores;
            TextAreaReporteSintactico.setText(finalSintactico);
            DialogoReporteAnalisis.setVisible(true);
            if(strPintar != null){
                if(parserLienzo.getErrores().isEmpty()&&parserColores.getErrores().isEmpty()&&parserTiempos.getErrores().isEmpty()&&parserPintar.getErrores().isEmpty()){
                    this.GenerarOption.setEnabled(true);
                    this.EditorGrafico.setEnabled(true);
                }else{
                    this.GenerarOption.setEnabled(false);
                    this.EditorGrafico.setEnabled(false);
                }
            }else{
                if(parserLienzo.getErrores().isEmpty()&&parserColores.getErrores().isEmpty()&&parserTiempos.getErrores().isEmpty()){
                    this.GenerarOption.setEnabled(true);
                    this.EditorGrafico.setEnabled(true);
                }else{
                    this.EditorGrafico.setEnabled(false);
                    this.GenerarOption.setEnabled(false);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    private void addTokensToTable(int opcion, JTable table, List<Token> tokens){
        DefaultTableModel modelo = (DefaultTableModel) table.getModel();
        modelo.setRowCount(0);
        for (Token token : tokens) {
            String tipo = null;
            switch(opcion){
                case 0: tipo = Analizadores.Lienzos.sym.terminalNames[token.getTipo()]; break;
                case 1: tipo = Analizadores.Colores.sym.terminalNames[token.getTipo()]; break;
                case 2: tipo = Analizadores.Tiempos.sym.terminalNames[token.getTipo()]; break;
                case 3: tipo = Analizadores.Pintar.sym.terminalNames[token.getTipo()]; break;
            }
            modelo.addRow(new String[]{tipo, token.getLexema(), String.valueOf(token.getLinea()), String.valueOf(token.getColumna())});
        }
        table.setModel(modelo);
    }
    
    private boolean hayTab(String extension){
        boolean valor = false;
        for (Component component : this.PanelArchivos.getComponents()) {
            if(((InputTab)component).getExtension().equals(extension)) valor = true;
        }
        return valor;
    }
    
    public void addTab(String extension, String texto){
        InputTab newTab;//creamos el nuevo tab a agregar
        if(extension != null){//si no enviamos una extension, es porque se cargo un archivo
            newTab = new InputTab("Pestaña de " +extension);//si no se cargo un archivo, este sera el nombre predeterminado
        }else{//si entra aqui es porque se cargo un archivo
            newTab = RegistroArchivos.cargarArchivo();//cargamos el archivo en el tab
            int posicionPunto = newTab.getOrigin().getAbsolutePath().lastIndexOf(".")+1;
            extension = newTab.getOrigin().getAbsolutePath().substring(posicionPunto, newTab.getOrigin().getAbsolutePath().length());//obtenemos la extension
        }
        if(newTab != null){
            newTab.setExtension(extension);
            boolean abrir = false;//nos servira para saber si abrimos el archivo
            if(hayTab(extension)){//si hay un archivo del mismo tipo abierto entonces preguntamos si cerramos
                int respuesta = JOptionPane.showConfirmDialog(null, "Se encuentra un archivo de lienzo abierto, ¿Desea cerrarlo para crear uno nuevo?", "Consulta", JOptionPane.INFORMATION_MESSAGE);
                if(respuesta==JOptionPane.YES_OPTION){//de ser respuesta afirmativa
                    //hay que verificar antes si deseamos guardar cambios
                    int index = 0;//indece del componente que vamos a cerrar
                    for (int i = 0; i < PanelArchivos.getComponentCount(); i++) {
                        if(((InputTab)PanelArchivos.getComponentAt(i)).getExtension()=="lnz") index = i;
                    }
                    try {
                        if (PanelArchivos.getTabCount() - 1 == 0) {
                            PanelArchivos.getComponentAt(0).setVisible(false);
                        }
                        PanelArchivos.remove(index);//removemos el tabPanel que tenia una archivo del mismo tipo abierto
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    abrir = true;//sabemos que si vamos a abrir el archivo
                }
            }else{
                abrir = true;
            }
            if(abrir){//si abrimos el archivo
                this.PanelArchivos.addTab(newTab.getName(), newTab);//lo agreamos al TabPanel
                //this.undoManager = newTab.getManager(); agrega el undoManager
                newTab.getTextArea().requestFocus();
                if(texto != null) newTab.setText(texto);
                newTab.getTextArea().addCaretListener(new CaretListener() {
                    public void caretUpdate(CaretEvent e) {
                        int pos = e.getDot();
                        try {
                            int row = newTab.getTextArea().getLineOfOffset(pos) + 1;
                            int col = pos - newTab.getTextArea().getLineStartOffset(row - 1) + 1;
                            InformacionLabel.setText("Línea: " + row + " Columna: " + col);
                        } catch (BadLocationException exc) {
                            System.out.println(exc);
                        }
                    }
                });
                newTab.getTextArea().addKeyListener(new KeyListener(){
                    @Override
                    public void keyPressed(KeyEvent e) {newTab.setModificado(true);}
                    @Override
                    public void keyTyped(KeyEvent e) {}
                    @Override
                    public void keyReleased(KeyEvent e) {}
                });
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog DialogoReporteAnalisis;
    private javax.swing.JMenuItem EditorGrafico;
    private javax.swing.JMenuItem GenerarOption;
    private javax.swing.JLabel InformacionLabel;
    private javax.swing.JTabbedPane PanelArchivos;
    private javax.swing.JTable TablaTokensColores;
    private javax.swing.JTable TablaTokensLienzo;
    private javax.swing.JTable TablaTokensPintar;
    private javax.swing.JTable TablaTokensTiempos;
    private javax.swing.JTextArea TextAreaReporteSintactico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables

//    private void escribirAtributo(Atributo atributo) {
//        try{
//            List<Atributo> atributos = (List<Atributo>) atributo.getValor();
//            System.out.println(atributo.getTipo()+": {");
//            for (Atributo temp : atributos) {
//                escribirAtributo(temp);
//            }
//            System.out.println("}");
//        }catch(Exception e){
//            System.out.println(atributo.getTipo()+"|||"+atributo.getValor());
//        }
//    }
}
