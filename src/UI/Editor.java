/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Analizadores.Colores.LexerColores;
import Analizadores.Colores.ParserColores;
import Analizadores.Json.LexerJson;
import Analizadores.Json.ParserJson;
import Analizadores.Lienzos.LexerLienzo;
import Analizadores.Lienzos.ParserLienzo;
import Analizadores.Tiempos.LexerTiempos;
import Analizadores.Tiempos.ParserTiempos;
import Analizadores.Objetos.Atributo;
import Objetos.Lienzo;
import Analizadores.Objetos.Token;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.StringReader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author fxhnd
 */
public class Editor extends javax.swing.JFrame {

    /**
     * Creates new form Editor
     */
    public Editor() {
        this.setExtendedState(this.MAXIMIZED_BOTH);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DialogoReporteAnalisis = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextAreaReporteLexico = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaReporteSintactico = new javax.swing.JTextArea();
        PanelArchivos = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        InformacionLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        DialogoReporteAnalisis.setSize(new java.awt.Dimension(1250, 450));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Analisis Lexico"));

        TextAreaReporteLexico.setColumns(20);
        TextAreaReporteLexico.setRows(5);
        jScrollPane1.setViewportView(TextAreaReporteLexico);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Analisis Sintactico"));

        TextAreaReporteSintactico.setColumns(20);
        TextAreaReporteSintactico.setRows(5);
        jScrollPane2.setViewportView(TextAreaReporteSintactico);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout DialogoReporteAnalisisLayout = new javax.swing.GroupLayout(DialogoReporteAnalisis.getContentPane());
        DialogoReporteAnalisis.getContentPane().setLayout(DialogoReporteAnalisisLayout);
        DialogoReporteAnalisisLayout.setHorizontalGroup(
            DialogoReporteAnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogoReporteAnalisisLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        DialogoReporteAnalisisLayout.setVerticalGroup(
            DialogoReporteAnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DialogoReporteAnalisisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DialogoReporteAnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Posicion:");

        jMenu1.setText("Archivo");

        jMenu3.setText("Nuevo Archivo");

        jMenuItem1.setText("Lienzos");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Coleres");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Tiempos");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Pintar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenu1.add(jMenu3);

        jMenuItem5.setText("Cargar Archivo");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem7.setText("Guardar Archivo");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem6.setText("Cerrar Archivo");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analizar");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Generar");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelArchivos, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InformacionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(InformacionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(PanelArchivos, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        addTab("lnz");
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        addTab(null);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        addTab("clrs");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        addTab("tmp");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        addTab("pnt");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "¿Estás seguro de cerrar esta pestaña?");//preguntamos si de verdad quiere cerrar
        if (option == JOptionPane.YES_OPTION) {//de ser si
            if (PanelArchivos.getTabCount() == 0) {//si no hay archivos abiertos
                JOptionPane.showMessageDialog(null, "No hay pestañas para cerrar");
            } else {//si hay mas de una rchivo abierto
                int index = PanelArchivos.getSelectedIndex();
                if(((InputTab)PanelArchivos.getComponentAt(index)).isModificado()){
                    //si se detectan cambios en el archivo a cerrar sin guardar preguntamos si guardar antes de cerrar
                    option = JOptionPane.showConfirmDialog(null, "Se han detectado cambios sin guardar en el archivo seleccionado, ¿desea guardar antes de cerrar?");
                    if(option == JOptionPane.YES_OPTION){
                        RegistroArchivos.guardarArchivo((InputTab)PanelArchivos.getComponentAt(index));
                    }
                }
                try {
                    if (PanelArchivos.getTabCount() - 1 == 0) {
                        PanelArchivos.getComponentAt(0).setVisible(false);
                    }
                    PanelArchivos.remove(index);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        //Aqui es el codigo para guardar el archivo
        int index = PanelArchivos.getSelectedIndex();
        try {
            RegistroArchivos.guardarArchivo((InputTab)PanelArchivos.getComponentAt(index));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        try {
            String strLienzos = null, strColores = null, strTiempos=null;
            for (int i = 0; i < PanelArchivos.getComponentCount(); i++) {
                switch(((InputTab)PanelArchivos.getComponent(i)).getExtension()){
                    case "lnz" : {
                        strLienzos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                    case "clrs" : {
                        strColores = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                    case "tmp" : {
                        strTiempos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                }
            }
            String reporteFinal = "";
            LexerLienzo lexer = new LexerLienzo(new StringReader(strLienzos));
            ParserLienzo parser = new ParserLienzo(lexer);
            List<Lienzo> lienzos = (List<Lienzo>) parser.parse().value;
            LexerColores segundoLexer = new LexerColores(new StringReader(strColores));
            ParserColores segundoParser = new ParserColores(segundoLexer, lienzos);
            segundoParser.parse();
            LexerTiempos tercerLexer = new LexerTiempos(new StringReader(strTiempos));
            ParserTiempos tercerParser = new ParserTiempos(tercerLexer, lienzos);
            tercerParser.parse();
            if(lienzos != null){
                for (Lienzo lienzo : lienzos) {
                    reporteFinal+=(lienzo.toString()+"\n");
                }
            }
            String reporteErrores = "\n\n*******************Errores Archivo Lienzos********************\n\n";
            for (String error : parser.getErrores()) {
                reporteErrores+=(error+"\n");
            }
            reporteErrores = "\n\n*******************Errores Archivo Colores********************\n\n";
            for (String error : segundoParser.getErrores()) {
                reporteErrores+=(error+"\n");
            }
            reporteErrores = "\n\n*******************Errores Archivo Tiempos********************\n\n";
            for (String error : tercerParser.getErrores()) {
                reporteErrores+=(error+"\n");
            }
            String tokens = "**********Archivo Lienzos**********\n";
            for (Token token : lexer.getTokensList()) {
                tokens+=("Tipo ["+Analizadores.Lienzos.sym.terminalNames[token.getTipo()]+"]->lexema ["+token.getLexema()+"]->linea ["+token.getLinea()+"]->Columna["+token.getColumna()+"]\n");
            }
            tokens+="***********Archivo Colores*************\n";
            for (Token token : segundoLexer.getTokensList()) {
                tokens+=("Token ["+Analizadores.Colores.sym.terminalNames[token.getTipo()]+"]->lexema ["+token.getLexema()+"]->linea ["+token.getLinea()+"]->Columna["+token.getColumna()+"]\n");
            }
            tokens+="***********Archivo Tiempos*************\n";
            for (Token token : tercerLexer.getTokensList()) {
                tokens+=("Token ["+Analizadores.Tiempos.sym.terminalNames[token.getTipo()]+"]->lexema ["+token.getLexema()+"]->linea ["+token.getLinea()+"]->Columna["+token.getColumna()+"]\n");
            }
            TextAreaReporteLexico.setText(tokens);
            String finalSintactico = reporteFinal+reporteErrores;
            TextAreaReporteSintactico.setText(finalSintactico);
            DialogoReporteAnalisis.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        try {
            String strLienzos = null, strColores = null, strTiempos=null;
            for (int i = 0; i < PanelArchivos.getComponentCount(); i++) {
                switch(((InputTab)PanelArchivos.getComponent(i)).getExtension()){
                    case "lnz" : {
                        strLienzos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                    case "clrs" : {
                        strColores = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                    case "tmp" : {
                        strTiempos = ((InputTab)PanelArchivos.getComponent(i)).getText();
                        break;
                    }
                }
            }
            if(strLienzos == null || strColores == null || strTiempos == null){
                JOptionPane.showMessageDialog(null, "No se han cargado todos los archivos minimos necesarios", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                LexerLienzo primerLexer = new LexerLienzo(new StringReader(strLienzos));
                ParserLienzo primerParser = new ParserLienzo(primerLexer);
                List<Lienzo> lienzos = (List<Lienzo>) primerParser.parse().value;
                LexerColores segundoLexer = new LexerColores(new StringReader(strColores));
                ParserColores segundoParser = new ParserColores(segundoLexer, lienzos);
                segundoParser.parse();
                LexerTiempos tercerLexer = new LexerTiempos(new StringReader(strTiempos));
                ParserTiempos tercerParser = new ParserTiempos(tercerLexer, lienzos);
                tercerParser.parse();
                for (Lienzo lienzo : lienzos) {
                    addLienzoTab(lienzo);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(Editor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenu4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    private boolean hayTab(String extension){
        boolean valor = false;
        for (Component component : this.PanelArchivos.getComponents()) {
            if(((InputTab)component).getExtension().equals(extension)) valor = true;
        }
        return valor;
    }
    
    private void addLienzoTab(Lienzo lienzo){
        PanelLienzo panelLienzo = new PanelLienzo(lienzo);
        this.PanelArchivos.addTab("lienzo", panelLienzo);
    }
    
    private void addTab(String extension){
        InputTab newTab;//creamos el nuevo tab a agregar
        if(extension != null){//si no enviamos una extension, es porque se cargo un archivo
            newTab = new InputTab("Pestaña de " +extension);//si no se cargo un archivo, este sera el nombre predeterminado
        }else{//si entra aqui es porque se cargo un archivo
            newTab = RegistroArchivos.cargarArchivo();//cargamos el archivo en el tab
            int posicionPunto = newTab.getOrigin().getAbsolutePath().lastIndexOf(".")+1;
            extension = newTab.getOrigin().getAbsolutePath().substring(posicionPunto, newTab.getOrigin().getAbsolutePath().length());//obtenemos la extension
        }
        if(newTab != null){
            newTab.setExtension(extension);
            boolean abrir = false;//nos servira para saber si abrimos el archivo
            if(hayTab(extension)){//si hay un archivo del mismo tipo abierto entonces preguntamos si cerramos
                int respuesta = JOptionPane.showConfirmDialog(null, "Se encuentra un archivo de lienzo abierto, ¿Desea cerrarlo para crear uno nuevo?", "Consulta", JOptionPane.INFORMATION_MESSAGE);
                if(respuesta==JOptionPane.YES_OPTION){//de ser respuesta afirmativa
                    //hay que verificar antes si deseamos guardar cambios
                    int index = 0;//indece del componente que vamos a cerrar
                    for (int i = 0; i < PanelArchivos.getComponentCount(); i++) {
                        if(((InputTab)PanelArchivos.getComponentAt(i)).getExtension()=="lnz") index = i;
                    }
                    try {
                        if (PanelArchivos.getTabCount() - 1 == 0) {
                            PanelArchivos.getComponentAt(0).setVisible(false);
                        }
                        PanelArchivos.remove(index);//removemos el tabPanel que tenia una archivo del mismo tipo abierto
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    abrir = true;//sabemos que si vamos a abrir el archivo
                }
            }else{
                abrir = true;
            }
            if(abrir){//si abrimos el archivo
                this.PanelArchivos.addTab(newTab.getName(), newTab);//lo agreamos al TabPanel
                //this.undoManager = newTab.getManager(); agrega el undoManager
                newTab.getTextArea().requestFocus();
                newTab.getTextArea().addCaretListener(new CaretListener() {
                    public void caretUpdate(CaretEvent e) {
                        int pos = e.getDot();
                        try {
                            int row = newTab.getTextArea().getLineOfOffset(pos) + 1;
                            int col = pos - newTab.getTextArea().getLineStartOffset(row - 1) + 1;
                            InformacionLabel.setText("Línea: " + row + " Columna: " + col);
                        } catch (BadLocationException exc) {
                            System.out.println(exc);
                        }
                    }
                });
                newTab.getTextArea().addKeyListener(new KeyListener(){
                    @Override
                    public void keyPressed(KeyEvent e) {newTab.setModificado(true);}
                    @Override
                    public void keyTyped(KeyEvent e) {}
                    @Override
                    public void keyReleased(KeyEvent e) {}
                });
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog DialogoReporteAnalisis;
    private javax.swing.JLabel InformacionLabel;
    private javax.swing.JTabbedPane PanelArchivos;
    private javax.swing.JTextArea TextAreaReporteLexico;
    private javax.swing.JTextArea TextAreaReporteSintactico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

//    private void escribirAtributo(Atributo atributo) {
//        try{
//            List<Atributo> atributos = (List<Atributo>) atributo.getValor();
//            System.out.println(atributo.getTipo()+": {");
//            for (Atributo temp : atributos) {
//                escribirAtributo(temp);
//            }
//            System.out.println("}");
//        }catch(Exception e){
//            System.out.println(atributo.getTipo()+"|||"+atributo.getValor());
//        }
//    }
}
