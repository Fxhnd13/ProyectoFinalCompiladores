package Analizadores.Lienzos;

import Objetos.Atributo;
import Objetos.ColorP;
import Objetos.Lienzo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

action code {:
    
    private void inicializarColor(ColorP color, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Red":{
                    if(color.getRed()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Red repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setRed((Integer) atributo.getValor());
                        }
                    }
                    break;
                }
                case "Blue":{
                    if(color.getBlue()!=(-1)){
                         listErrores.add("Ya existe un valor asignado, atributo Blue repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal, error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setBlue((Integer) atributo.getValor());
                        }
                    }
                    break;
                }
                case "Green":{
                    if(color.getGreen()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Green repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getHex()!=null){
                            listErrores.add("Ya existe un valor asignado, atributo Hexadecimal error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setGreen((Integer) atributo.getValor());
                        }
                    }
                    break;
                }
                case "Hexadecimal":{
                    if(color.getHex()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Hex repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        if(color.getRed()!=(-1)||color.getBlue()!=(-1)||color.getGreen()!=(-1)){
                            listErrores.add("Ya existe un valor asignado, atributo RGB error en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                        }else{
                            color.setHex((String) atributo.getValor());
                        }
                    }
                    break;  
                }
            }
        }
    }

    private void inicializarLienzo(Lienzo lienzoTemp, List<Atributo> atributos){
        for(Atributo atributo : atributos){
            switch(atributo.getTipo()){
                case "Id":{
                    if(lienzoTemp.getIdSalida()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo id repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setIdSalida((String) atributo.getValor());
                    }
                    break;
                }
                case "Tipo":{
                    if(lienzoTemp.getExtension()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo tipo repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setExtension((String) atributo.getValor());
                    }
                    break;
                }
                case "Fondo":{
                    if(lienzoTemp.getFondo()!=null){
                        listErrores.add("Ya existe un valor asignado, atributo Fondo repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setFondo((ColorP) atributo.getValor());
                    }
                    break;
                }
                case "Pixeles":{
                    if(lienzoTemp.getCuadros()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo cuadros repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setCuadros((Integer) atributo.getValor());
                    }
                    break;
                }
                case "Dimension_x":{
                    if(lienzoTemp.getdX()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Dimension_x repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setdX((Integer) atributo.getValor());
                    }
                    break;
                }
                case "Dimension_y":{
                    if(lienzoTemp.getdY()!=(-1)){
                        listErrores.add("Ya existe un valor asignado, atributo Dimension_y repetido en la linea: "+atributo.getLinea()+", columna: "+atributo.getColumna());
                    }else{
                        lienzoTemp.setdY((Integer) atributo.getValor());
                    }
                    break;
                }
            }
        }
    }
    
    private boolean isValido(ColorP color){
        boolean valor = true;
        if(color.getHex()==null){
            if(color.getRed()==(-1)||color.getBlue()==(-1)||color.getGreen()==(-1)) valor = false;
        }
        return valor;
    }

    private boolean isValido(Lienzo lienzoT){
        boolean valor = true;
        int lineaLienzoT = lienzoT.getLineaT();
        int columnaLienzoT = lienzoT.getColumnaT();
        if(lienzoT.getIdSalida()==null){
            listErrores.add("No se especifico el nombre de salida que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getExtension()==null){
            listErrores.add("No se especifico el tipo de salida que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getFondo()==null){
            listErrores.add("No se especifico el fondo que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getCuadros()==-1){
            listErrores.add("No se especifico la cantidad de pixeles que tendrá cada cuadro del lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getdX()==-1){
            listErrores.add("No se especifico la cantidad de cuadros horizontales que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: +"+lineaLienzoT+", columna: "+columnaLienzoT);
        }
        if(lienzoT.getdY()==-1){
            listErrores.add("No se especifico la cantidad de cuadros verticales que tendrá el lienzo "+lienzoT.getId()+" declarado en la linea: "+
                            lineaLienzoT+", columna: "+columnaLienzoT);
        }
        return valor;
    }

    private boolean existeLienzo(Lienzo lienzo, List<Lienzo> lienzos){
        boolean valor = false;
        for(Lienzo lienzoT : lienzos){
            if(lienzo.getId().equals(lienzoT.getId())) valor = true;
        }
        return valor;
    }
:}

parser code {:
        
        private List<String> listErrores = new ArrayList<String>();

        public List<String> getErrores(){
            return listErrores;
        }
        
        public ParserLienzo(LexerLienzo lex) { 
            super(lex);   
            listErrores = lex.getErrorsList();
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("Couldn't repair and continue parse "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = s.value.toString();
            int linea = (s.left+1);
            int columna = (s.right+1);
            switch(s.toString()){
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }
        
:}

/* Terminals (tokens returned by the scanner). */
terminal Token         PR_LIENZOS, LLAVE_A, LLAVE_C, ASIGNACION, PR_NOMBRE, PR_TIPO, COMA, PR_FONDO, PR_TAMANO, PR_CUADRO, PR_DX, PR_DY, PR_RED;
terminal Token         PR_GREEN, PR_BLUE, PR_HEX, COMILLA, FIN_LINEA;

terminal String        ID, HEX, EXTENSION;
terminal int           ENTERO;

non terminal List<Lienzo>               S, strLienzos;
non terminal Lienzo                     inicioLienzo;
non terminal List<Atributo>             strLienzo, paramFondo, paramTamano, paramLienzo;
non terminal Atributo                   paramFondoSolo, paramTamanoSolo;

/* The grammar */

start with S;

S ::=               LLAVE_A PR_LIENZOS ASIGNACION LLAVE_A strLienzos:listLienzos LLAVE_C LLAVE_C {:
                        RESULT = listLienzos;
                    :}
                    |error LLAVE_A
                    ;

strLienzos ::=      strLienzos:listLienzos COMA inicioLienzo:lienzo {:
                            if(!existeLienzo(lienzo, listLienzos)){
                                if(isValido(lienzo)){
                                    listLienzos.add(lienzo);
                                }
                            }
                            RESULT = listLienzos;
                        :}
                    |inicioLienzo:lienzo {:
                            ArrayList<Lienzo> listLienzos = new ArrayList<Lienzo>();
                            if(!existeLienzo(lienzo, listLienzos)){
                                if(isValido(lienzo)){
                                    listLienzos.add(lienzo);
                                }
                            }
                            RESULT = listLienzos;
                        :}
                    ;

inicioLienzo ::=    ID:id ASIGNACION LLAVE_A strLienzo:listAtributos LLAVE_C{:
                            Lienzo lienzo = new Lienzo();
                            inicializarLienzo(lienzo, (List<Atributo>) listAtributos);
                            lienzo.setId(id);
                            lienzo.setLineaT(cur_token.left);
                            lienzo.setColumnaT(cur_token.right);
                            RESULT = lienzo;
                        :}
                    ;

strLienzo ::=       strLienzo:listAtributos COMA paramLienzo:listAtributosDerecha {:
                            for(Atributo atributo : listAtributosDerecha){
                                listAtributos.add(atributo);
                            }
                            RESULT = listAtributos;
                        :}
                    |paramLienzo:listAtributosDerecha {:
                            RESULT = listAtributosDerecha;
                        :}
                    ;

paramFondo ::=      paramFondo:listAtributos COMA paramFondoSolo:atributo {:
                            listAtributos.add(atributo);
                            RESULT = listAtributos;
                        :}
                    |paramFondoSolo:atributo {:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            atributos.add(atributo);
                            RESULT = atributos;
                        :}
                    ;

paramFondoSolo ::=  PR_RED ASIGNACION ENTERO:valor {:
                            Atributo atributo = new Atributo("Red", valor, cur_token.left+1, cur_token.right+1);
                            RESULT = atributo;
                        :}
                    |PR_BLUE ASIGNACION ENTERO:valor{:
                            Atributo atributo = new Atributo("Blue", valor, cur_token.left+1, cur_token.right+1);
                            RESULT = atributo;
                        :}
                    |PR_GREEN ASIGNACION ENTERO:valor{:
                            Atributo atributo = new Atributo("Green", valor, cur_token.left+1, cur_token.right+1);
                            RESULT = atributo;
                        :}
                    |PR_HEX ASIGNACION HEX:valor{:
                            Atributo atributo = new Atributo("Hexadecimal", valor, cur_token.left+1, cur_token.right+1);
                            RESULT = atributo;
                        :}
                    ;
                  
paramTamanoSolo::=  PR_CUADRO ASIGNACION ENTERO:valor {:
                            Atributo atributo = new Atributo("Pixeles", valor, cur_token.left+1, cur_token.right+1);
                            RESULT = atributo;
                        :}
                    |PR_DX ASIGNACION ENTERO:valor {:
                            Atributo atributo = new Atributo("Dimension_x", valor, cur_token.left+1, cur_token.right+1);
                            RESULT = atributo;
                        :}
                    |PR_DY ASIGNACION ENTERO:valor {:
                            Atributo atributo = new Atributo("Dimension_y", valor, cur_token.left+1, cur_token.right+1);
                            RESULT = atributo;
                        :}
                    ;

paramTamano::=      paramTamano:listAtributos COMA paramTamanoSolo:atributo {:
                            listAtributos.add(atributo);
                            RESULT = listAtributos;
                        :}
                    |paramTamanoSolo:atributo {:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            atributos.add(atributo);
                            RESULT = atributos;
                        :}
                    ;
  
paramLienzo ::=     PR_NOMBRE ASIGNACION COMILLA ID:id COMILLA{:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            atributos.add(new Atributo("Id", id, cur_token.left+1, cur_token.right+1));
                            RESULT = atributos;
                        :}
                    |PR_TIPO ASIGNACION COMILLA EXTENSION:extension COMILLA{:
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            atributos.add(new Atributo("Extension", extension, cur_token.left+1, cur_token.right+1));
                            RESULT = atributos;
                        :}
                    |PR_FONDO ASIGNACION LLAVE_A paramFondo:listAtributosFondo LLAVE_C{:
                            ColorP color = new ColorP();
                            inicializarColor(color, listAtributosFondo);
                            ArrayList<Atributo> atributos = new ArrayList<Atributo>();
                            if(isValido(color)){
                                atributos.add(new Atributo("Fondo", color, cur_token.left+1, cur_token.right+1));
                            }
                            RESULT = atributos;
                        :}
                    |PR_TAMANO ASIGNACION LLAVE_A paramTamano:listAtributosTamano LLAVE_C {:
                            RESULT = listAtributosTamano;
                        :}
                    |error COMA
                    ;
